[
  {
    "instance_id": "sjtu_CVE-2018-1002201",
    "hits": [
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 1207,
        "endline": 1259
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 1134,
        "endline": 1147
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 1267,
        "endline": 1310
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 64,
        "endline": 64
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipEntryCallback.java",
        "startline": 1,
        "endline": 40
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/NameMapper.java",
        "startline": 1,
        "endline": 34
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/commons/FileUtils.java",
        "startline": 43,
        "endline": 61
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/commons/FileUtils.java",
        "startline": 17,
        "endline": 23
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/commons/FilenameUtils.java",
        "startline": 175,
        "endline": 230
      }
    ],
    "function_summary": "This code segment contains the complete definition of the BackslashUnpacker inner class and the beginning of the Unwrapper inner class. \n\nThe BackslashUnpacker class is a public static inner class that implements the ZipEntryCallback interface. It handles unpacking ZIP archives that contain entries with backslash (\\) path separators instead of the standard forward slash (/) separator, which can occur when archives are created by non-compliant software. The class uses a NameMapper to optionally transform entry names, creates directory structures by splitting paths on backslashes, performs directory traversal validation via checkDestinationFileForTraversal, and copies file content from the input stream to the destination file using FileUtils.copy.\n\nThe Unwrapper class (partially shown) is a private static inner class that also implements ZipEntryCallback. It unwraps ZIP entries by removing a single parent directory, throwing an exception if multiple root directories exist."
  },
  {
    "instance_id": "sjtu_CVE-2018-1000850",
    "hits": [
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 63,
        "endline": 66
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 67,
        "endline": 97
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 234,
        "endline": 272
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 208,
        "endline": 214
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 217,
        "endline": 224
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestFactory.java",
        "startline": 112,
        "endline": 122
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestFactory.java",
        "startline": 78,
        "endline": 79
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestFactory.java",
        "startline": 92,
        "endline": 93
      }
    ],
    "function_summary": "This code segment conditionally initializes builders for handling form-encoded or multipart HTTP request bodies in the RequestBuilder constructor. If the request is form-encoded (isFormEncoded is true), it creates a FormBody.Builder and assigns it to the formBuilder field. If the request is multipart (isMultipart is true), it creates a MultipartBody.Builder, assigns it to the multipartBuilder field, and sets its type to MultipartBody.FORM. These builders are later used in the get() method (line 252-255) to construct the actual request body when body is null."
  },
  {
    "instance_id": "sjtu_CVE-2016-9177",
    "hits": [
      {
        "docid": "src/main/java/spark/resource/ExternalResourceHandler.java",
        "startline": 60,
        "endline": 87
      },
      {
        "docid": "src/main/java/spark/resource/ExternalResourceHandler.java",
        "startline": 35,
        "endline": 36
      },
      {
        "docid": "src/main/java/spark/resource/AbstractResourceHandler.java",
        "startline": 80,
        "endline": 122
      },
      {
        "docid": "src/main/java/spark/resource/UriPath.java",
        "startline": 32,
        "endline": 162
      },
      {
        "docid": "src/main/java/spark/resource/ExternalResource.java",
        "startline": 30,
        "endline": 88
      },
      {
        "docid": "src/main/java/spark/staticfiles/DirectoryTraversal.java",
        "startline": 18,
        "endline": 24
      },
      {
        "docid": "src/main/java/spark/staticfiles/DirectoryTraversal.java",
        "startline": 36,
        "endline": 42
      },
      {
        "docid": "src/main/java/spark/resource/AbstractFileResolvingResource.java",
        "startline": 37,
        "endline": 103
      },
      {
        "docid": "src/main/java/spark/utils/StringUtils.java",
        "startline": 218,
        "endline": 267
      },
      {
        "docid": "src/main/java/spark/utils/StringUtils.java",
        "startline": 393,
        "endline": 406
      }
    ],
    "function_summary": "This code segment is the implementation of the `getResource` method in `ExternalResourceHandler`, which resolves and validates external file resources based on a URL path. It performs the following operations:\n1. Validates that the path is non-null and starts with \"/\"\n2. Canonicalizes the path to resolve \".\" and \"..\" segments\n3. Combines the base resource path with the requested path\n4. Creates an ExternalResource object for the combined path\n5. If the resource is a directory and a welcome file is configured, attempts to serve the welcome file instead\n6. Validates the final resource exists and protects against directory traversal attacks\n7. Returns the valid resource or null if not found/invalid, catching and logging any exceptions"
  },
  {
    "instance_id": "sjtu_CVE-2018-12036",
    "hits": [
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java",
        "startline": 86,
        "endline": 141
      },
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/Engine.java",
        "startline": 1065,
        "endline": 1073
      }
    ],
    "function_summary": "This code segment is a public static method that extracts files from a ZIP archive to a specified directory with security checks and optional file filtering based on an Engine's file type acceptance. It validates input parameters, obtains the canonical path of the destination directory to prevent directory traversal attacks (Zip Slip vulnerability), then iterates through ZIP entries. For directory entries, it creates the directory structure while validating paths don't escape the target directory. For file entries, it checks if the Engine accepts the file type (or extracts all files if engine is null), validates the file path doesn't escape the target directory, and copies the file content to disk. The method throws ExtractionException for any I/O errors or security violations encountered during extraction."
  },
  {
    "instance_id": "sjtu_CVE-2022-36007",
    "hits": [
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/loadpath/LoadPaths.java",
        "startline": 234,
        "endline": 283
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/loadpath/LoadPaths.java",
        "startline": 426,
        "endline": 428
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/loadpath/DirectoryLoadPath.java",
        "startline": 37,
        "endline": 146
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/loadpath/LoadPath.java",
        "startline": 36,
        "endline": 96
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/VncException.java",
        "startline": 45,
        "endline": 96
      }
    ],
    "function_summary": "This code segment handles file input stream retrieval when unlimited access mode is enabled and the file was not found in the configured load paths. It searches for non-absolute files within the directory load paths by constructing the full file path (load path directory + relative file path), and if found, returns an InputStream for that file. If the file is absolute or not found in load paths, it checks if the file exists at the specified path and returns an InputStream for it."
  },
  {
    "instance_id": "sjtu_CVE-2021-41189",
    "hits": [
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 929,
        "endline": 941
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/eperson/service/GroupService.java",
        "startline": 42,
        "endline": 42
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/eperson/service/GroupService.java",
        "startline": 51,
        "endline": 51
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/authorize/service/AuthorizeService.java",
        "startline": 406,
        "endline": 407
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/authorize/service/AuthorizeService.java",
        "startline": 255,
        "endline": 255
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/core/Context.java",
        "startline": 1,
        "endline": 991
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/Collection.java",
        "startline": 1,
        "endline": 337
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/eperson/Group.java",
        "startline": 1,
        "endline": 241
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/core/Constants.java",
        "startline": 1,
        "endline": 279
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/authorize/ResourcePolicy.java",
        "startline": 1,
        "endline": 319
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 89,
        "endline": 89
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 98,
        "endline": 98
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 945,
        "endline": 948
      }
    ],
    "function_summary": "This code creates a default read group for a collection by:\n1. Creating a new group using the GroupService\n2. Setting the group's name to a standardized format (COLLECTION_{UUID}_{typeOfGroupString}_DEFAULT_READ)\n3. Removing existing resource policies for the specified action (defaultRead) from the collection\n4. Adding a new policy granting the newly created group the specified default read permission on the collection\n5. Updating the group in the database\n6. Returning the created group\n\nThis is used to establish controlled read access to collection resources by creating a dedicated group and assigning it appropriate permissions while removing any previous conflicting policies."
  },
  {
    "instance_id": "sjtu_CVE-2024-2928",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 589,
        "endline": 629
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 579,
        "endline": 586
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 518,
        "endline": 577
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 48,
        "endline": 56
      },
      {
        "docid": "mlflow/utils/validation.py",
        "startline": 108,
        "endline": 121
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 67,
        "endline": 114
      }
    ],
    "function_summary": "The `_validate_param_against_schema` function validates a single request parameter against a specified validation schema. It iterates through a list of validation functions, executing each one on the provided parameter value. If proto parsing was successful, type validators are skipped since protobuf already validated types. When a validation function raises an AssertionError, the function constructs an appropriate error message (either from the exception, a default message for required parameters, or a generic invalid value message with type hint) and wraps it in an MlflowException with INVALID_PARAMETER_VALUE error code, appending a message about consulting API docs. The function returns None on success or raises an exception on failure."
  },
  {
    "instance_id": "sjtu_CVE-2024-1483",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 589,
        "endline": 629
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 579,
        "endline": 586
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 518,
        "endline": 519
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 522,
        "endline": 528
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 531,
        "endline": 532
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 535,
        "endline": 541
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 544,
        "endline": 545
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 575,
        "endline": 576
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 554,
        "endline": 562
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 565,
        "endline": 567
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 570,
        "endline": 572
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 548,
        "endline": 551
      },
      {
        "docid": "mlflow/utils/validation.py",
        "startline": 108,
        "endline": 117
      },
      {
        "docid": "mlflow/utils/validation.py",
        "startline": 120,
        "endline": 121
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 1,
        "endline": 56
      }
    ],
    "function_summary": "The code segment defines `_validate_param_against_schema`, a function that validates a single request parameter against a schema of validation functions. It is used in MLflow's Flask-based REST API server to ensure incoming request parameters meet type and value requirements before processing.\n\nThe function iterates through a list of schema validation functions (e.g., type checkers, required field validators) and applies each to the parameter value. If Protocol Buffer parsing succeeded, type validators are skipped as an optimization since protobuf guarantees correct types. When a validator raises an AssertionError, the function converts it to a MlflowException with a user-friendly error message that includes the parameter name and helpful hints. The function returns None on success or raises MlflowException on validation failure.\n\nKey behavior:\n- Skips type validators (_TYPE_VALIDATORS) when proto_parsing_succeeded=True\n- Catches AssertionError and converts to MlflowException with formatted error messages\n- Uses helper functions (invalid_value, missing_value) to generate error messages\n- Provides hints about parameter types in error messages"
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-9988",
    "hits": [
      {
        "docid": "util/parser.c",
        "startline": 3077,
        "endline": 3088
      },
      {
        "docid": "util/parser.c",
        "startline": 78,
        "endline": 135
      },
      {
        "docid": "util/swftypes.h",
        "startline": 29,
        "endline": 29
      },
      {
        "docid": "util/swftypes.h",
        "startline": 1808,
        "endline": 1812
      },
      {
        "docid": "util/read.h",
        "startline": 22,
        "endline": 22
      },
      {
        "docid": "util/read.c",
        "startline": 347,
        "endline": 365
      },
      {
        "docid": "src/blocks/error.h",
        "startline": 34,
        "endline": 42
      }
    ],
    "function_summary": "Lines 3079-3083 of util/parser.c implement memory allocation for a namespace set in an ActionScript 3 bytecode (ABC) parser. The code reads the count of namespace references, allocates an array of U30 (unsigned 30-bit variable-length encoded integers) to store namespace indices, and handles allocation failure by calling SWF_error with a formatted error message before returning early from the function."
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-11728",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 841,
        "endline": 868
      },
      {
        "docid": "util/decompile.c",
        "startline": 289,
        "endline": 302
      },
      {
        "docid": "util/decompile.c",
        "startline": 420,
        "endline": 489
      },
      {
        "docid": "util/decompile.c",
        "startline": 50,
        "endline": 50
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      }
    ],
    "function_summary": "This code segment is part of the `decompilePUSHPARAM` function, which outputs decompiled ActionScript code for a PUSH parameter. Specifically, lines 861-868 handle the PUSH_REGISTER case: when the parameter type is a register reference, the code checks if that register has an associated name stored in the global `regs` array. If the register has a name, it outputs the name via `getName(act)`; otherwise, it outputs the register identifier in the format \"Rn\" where n is the register number."
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-11729",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 859,
        "endline": 868
      },
      {
        "docid": "util/decompile.c",
        "startline": 419,
        "endline": 489
      },
      {
        "docid": "util/decompile.c",
        "startline": 304,
        "endline": 417
      },
      {
        "docid": "util/decompile.c",
        "startline": 50,
        "endline": 50
      },
      {
        "docid": "util/decompile.c",
        "startline": 289,
        "endline": 302
      },
      {
        "docid": "util/swftypes.h",
        "startline": 120,
        "endline": 135
      }
    ],
    "function_summary": "This code segment checks the type of a register parameter. If the register value exists and is not null, it calls getName() to get the name of the register value and prints it. Otherwise, it prints a generic register identifier \"R%d\" with the register number."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-7868",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/decompile.c",
        "startline": 289,
        "endline": 302
      },
      {
        "docid": "util/decompile.c",
        "startline": 234,
        "endline": 245
      },
      {
        "docid": "util/decompile.c",
        "startline": 247,
        "endline": 263
      },
      {
        "docid": "util/decompile.c",
        "startline": 265,
        "endline": 272
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 50
      },
      {
        "docid": "util/decompile.c",
        "startline": 419,
        "endline": 489
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "src/blocks/error.h",
        "startline": 15,
        "endline": 42
      }
    ],
    "function_summary": "This code segment (lines 306-369 in util/decompile.c) implements the `getString()` function, which converts a Flash ActionScript push parameter (struct SWF_ACTIONPUSHPARAM) into a string representation. The function uses a switch statement to handle different parameter types (strings, numbers, booleans, registers, constants, variables, etc.) and returns a dynamically allocated string formatted appropriately for each type. For strings and constants, it wraps the value in single quotes; for numeric types, it uses snprintf to determine buffer size before formatting; for registers, it attempts to resolve register names or defaults to \"RX\" notation; for booleans it returns \"true\"/\"false\"; and for NULL/undefined values it returns their literal string representations. The function includes error handling through SWF_warn() calls for NULL strings, buffer sizing issues, and out-of-bounds constant pool accesses. If none of the type cases match or errors occur, it returns an empty string."
  },
  {
    "instance_id": "Choser_CVE-2017-14164",
    "hits": [
      {
        "docid": "src/lib/openjp2/j2k.c",
        "startline": 4217,
        "endline": 4268
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 248,
        "endline": 317
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 238,
        "endline": 241
      },
      {
        "docid": "src/lib/openjp2/event.h",
        "startline": 50,
        "endline": 68
      },
      {
        "docid": "src/lib/openjp2/event.h",
        "startline": 89,
        "endline": 90
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 115,
        "endline": 117
      },
      {
        "docid": "src/lib/openjp2/opj_malloc.h",
        "startline": 55,
        "endline": 94
      }
    ],
    "function_summary": "This code segment (lines 4203-4226) is the beginning of the `opj_j2k_merge_ppt()` function, which merges all PPT (Packed Packet Headers, tile-part header) markers that have been read. The specific lines check if the function has already been called by verifying if `p_tcp->ppt_buffer` is non-NULL. If it is, the function logs an error message and returns OPJ_FALSE to indicate failure, preventing duplicate processing of PPT markers."
  },
  {
    "instance_id": "uuykea_CVE-2018-5786",
    "hits": [
      {
        "docid": "lrzip.c",
        "startline": 1056,
        "endline": 1136
      },
      {
        "docid": "lrzip.c",
        "startline": 281,
        "endline": 294
      },
      {
        "docid": "lrzip.c",
        "startline": 213,
        "endline": 279
      },
      {
        "docid": "lrzip_private.h",
        "startline": 393,
        "endline": 476
      },
      {
        "docid": "lrzip_private.h",
        "startline": 208,
        "endline": 315
      },
      {
        "docid": "lrzip_private.h",
        "startline": 81,
        "endline": 83
      },
      {
        "docid": "lrzip_private.h",
        "startline": 151,
        "endline": 152
      },
      {
        "docid": "lrzip_private.h",
        "startline": 143,
        "endline": 144
      },
      {
        "docid": "lrzip_private.h",
        "startline": 192,
        "endline": 206
      },
      {
        "docid": "util.h",
        "startline": 53,
        "endline": 60
      }
    ],
    "function_summary": "This code segment initializes file metadata and configures archive format parameters based on lrzip version. It retrieves the input file size using fstat, reads the archive magic header to extract decompressed size and version information, handles encrypted archives, reads version-specific metadata (chunk_byte, eof flag, chunk_size for versions >0.4), and calculates offset and header_length values based on the archive's major and minor version numbers to support backward compatibility with different lrzip format versions."
  },
  {
    "instance_id": "uuykea_CVE-2019-20162",
    "hits": [
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 95,
        "endline": 428
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 45,
        "endline": 150
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 619,
        "endline": 625
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 62,
        "endline": 63
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 234,
        "endline": 298
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 2199,
        "endline": 2223
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 76,
        "endline": 87
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 118,
        "endline": 236
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 280,
        "endline": 289
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 458,
        "endline": 461
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 505,
        "endline": 513
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 526,
        "endline": 544
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 624,
        "endline": 633
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 2266,
        "endline": 2275
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 120,
        "endline": 217
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 804,
        "endline": 1047
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 236,
        "endline": 260
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 1,
        "endline": 94
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 429,
        "endline": 700
      }
    ],
    "function_summary": "Lines 99-190 of `src/isomedia/box_funcs.c` constitute the initial parsing logic within the `gf_isom_box_parse_ex()` function, which is responsible for parsing ISO Base Media File Format (ISOBMFF) boxes from a bitstream. This code segment performs the following operations:\n\n1. **Variable Declarations (lines 97-107)**: Declares local variables for box parsing including type identifiers, size trackers, UUID storage, error codes, bitstream pointers for decompression, and flags for logging and special box handling.\n\n2. **Parameter Validation (lines 109-113)**: Checks for null pointers and ensures sufficient bytes are available in the bitstream (minimum 8 bytes required for box header).\n\n3. **Box Header Reading (lines 115-126)**: Reads the initial box size (4 bytes) and type (4 bytes) from the bitstream. Handles legacy malformed boxes with sizes 2-4 as VOID boxes.\n\n4. **Corrupted File Recovery (lines 128-135)**: Implements special recovery logic for corrupted files where top-level 'free' boxes should be 'moof' boxes by checking if the first child is 'mfhd'.\n\n5. **Special Size Handling (lines 137-153)**: Handles QuickTime TOTL box (fixed 12-byte size) and boxes with size=0 (indicating data extends to end of file), with validation for root-level vs nested boxes.\n\n6. **Decompression Setup (lines 154-190)**: Detects compressed boxes (CMOV, CMOF, CSIX, CSSX, and QuickTime CMVD variants) and prepares for payload decompression by:\n   - Checking cookie flags for decompression enablement\n   - Validating box types requiring decompression\n   - For QuickTime CMVD: parsing child boxes (DCOM with zlib compression type, CMVD with uncompressed size)\n   - Allocating buffers and calling gf_gz_decompress_payload_ex() for zlib decompression\n   - Creating a new bitstream from uncompressed data\n   - Handling compression errors"
  },
  {
    "instance_id": "Choser_CVE-2018-18088",
    "hits": [
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 2014,
        "endline": 2285
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 382,
        "endline": 409
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 414,
        "endline": 433
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 807,
        "endline": 807
      }
    ],
    "function_summary": "Lines 2235-2241 handle error cleanup and variable initialization when a file fails to open for writing in the PNM image export function. Specifically: line 2235 frees the dynamically allocated destination filename string, line 2236 returns an error code (1), and lines 2238-2241 extract and compute image component properties (width, height, precision, and maximum pixel value based on precision) from the current image component being processed."
  },
  {
    "instance_id": "Choser_CVE-2018-19664",
    "hits": [
      {
        "docid": "src/wrbmp.c",
        "startline": 495,
        "endline": 508
      },
      {
        "docid": "src/jpegint.h",
        "startline": 77,
        "endline": 78
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 264,
        "endline": 290
      },
      {
        "docid": "src/jmorecfg.h",
        "startline": 300,
        "endline": 358
      },
      {
        "docid": "src/wrbmp.c",
        "startline": 96,
        "endline": 169
      },
      {
        "docid": "src/wrbmp.c",
        "startline": 171,
        "endline": 204
      },
      {
        "docid": "src/wrbmp.c",
        "startline": 476,
        "endline": 553
      },
      {
        "docid": "src/cdjpeg.h",
        "startline": 51,
        "endline": 85
      },
      {
        "docid": "src/wrbmp.c",
        "startline": 50,
        "endline": 74
      }
    ],
    "function_summary": "This code segment (lines 498-511 in wrbmp.c) is the function pointer assignment logic within the `jinit_write_bmp` initialization function. It determines which pixel row writing function to assign to `dest->pub.put_pixel_rows` based on the output color space and quantization settings of the JPEG decompressor. Specifically:\n\n- If output is grayscale (JCS_GRAYSCALE), it assigns `put_gray_rows`\n- If output is an extended RGB format (IsExtRGB) and colors are quantized, it assigns `put_gray_rows` (for colormapped output)\n- If output is an extended RGB format and not quantized, it assigns `put_pixel_rows` (for 24-bit full-color output)\n- If output is RGB565 or CMYK without quantization, it assigns `put_pixel_rows`\n- Otherwise, it reports a colorspace error\n\nThis logic routes decompressed JPEG data to the appropriate BMP writing handler based on the output format requirements."
  },
  {
    "instance_id": "Choser_CVE-2018-20330",
    "hits": [
      {
        "docid": "src/turbojpeg.c",
        "startline": 107,
        "endline": 144
      },
      {
        "docid": "src/turbojpeg.c",
        "startline": 182,
        "endline": 200
      },
      {
        "docid": "src/turbojpeg.c",
        "startline": 228,
        "endline": 265
      },
      {
        "docid": "src/turbojpeg.c",
        "startline": 304,
        "endline": 312
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1090,
        "endline": 1099
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1104,
        "endline": 1128
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1206,
        "endline": 1214
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1198,
        "endline": 1198
      }
    ],
    "function_summary": "This code segment (lines 1963-2019 of turbojpeg.c) implements three functions for scaling and cropping JPEG decompression:\n1. `tj3GetScalingFactors()` - Returns an array of supported scaling factors for JPEG decompression\n2. `tjGetScalingFactors()` - Legacy wrapper for tj3GetScalingFactors()\n3. `tj3SetScalingFactor()` - Validates and sets a scaling factor on a decompression instance\n\nThe main functionality validates the scaling factor against a static array of 16 supported factors and stores it in the tjinstance structure for use in subsequent decompression operations."
  },
  {
    "instance_id": "Choser_CVE-2018-5727",
    "hits": [
      {
        "docid": "src/lib/openjp2/t1.c",
        "startline": 1998,
        "endline": 2184
      },
      {
        "docid": "src/lib/openjp2/mqc.h",
        "startline": 74,
        "endline": 97
      },
      {
        "docid": "src/lib/openjp2/tcd.h",
        "startline": 120,
        "endline": 145
      },
      {
        "docid": "src/lib/openjp2/event.h",
        "startline": 50,
        "endline": 90
      },
      {
        "docid": "src/lib/openjp2/thread.h",
        "startline": 51,
        "endline": 73
      },
      {
        "docid": "src/lib/openjp2/t1.h",
        "startline": 184,
        "endline": 210
      }
    ],
    "function_summary": "This code segment implements thread-safe warning message logging for PTERM (predictive termination) check failures during JPEG2000 codeblock decoding. It detects two types of termination issues: (1) excessive remaining bytes in the codeblock after decoding, and (2) excessive synthesized 0xFF markers read during MQC (arithmetic coder) decoding. When either condition is detected, it acquires a mutex lock (if provided), outputs a formatted warning message via the event manager, and releases the mutex. This ensures that error reporting from multiple concurrent decoding threads does not result in garbled or interleaved output."
  },
  {
    "instance_id": "Choser_CVE-2018-5785",
    "hits": [
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 349,
        "endline": 511
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 56,
        "endline": 81
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 115,
        "endline": 133
      }
    ],
    "function_summary": "Reads and validates the green, blue, and alpha channel bit masks from a BMP file's info header. For BMP headers with biSize >= 56 bytes (BITMAPV3INFOHEADER or later), this code reads 4 bytes each for biGreenMask, biBlueMask, and biAlphaMask from the input file stream in little-endian format using getc(). It validates that biGreenMask and biBlueMask are non-zero, printing error messages and returning OPJ_FALSE if validation fails. The biAlphaMask is read but not validated (can be zero)."
  },
  {
    "instance_id": "Choser_CVE-2018-6616",
    "hits": [
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 526,
        "endline": 612
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 48,
        "endline": 81
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 116,
        "endline": 139
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 614,
        "endline": 700
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 513,
        "endline": 524
      }
    ],
    "function_summary": "This code segment implements RLE8 (Run-Length Encoding 8-bit) decompression for BMP images. It reads compressed pixel data from a file stream and decodes it into an uncompressed pixel buffer. The function handles both encoded mode (repeated pixel values) and absolute mode (literal pixel sequences), along with special control codes: End-Of-Line (0x00), End-Of-Picture (0x01), and delta positioning (0x02). It validates buffer boundaries during decompression and verifies that the total number of decoded pixels matches the expected image dimensions."
  },
  {
    "instance_id": "Choser_CVE-2019-2201",
    "hits": [
      {
        "docid": "src/tjbench.c",
        "startline": 176,
        "endline": 198
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1198,
        "endline": 1198
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 434,
        "endline": 436
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1090,
        "endline": 1099
      },
      {
        "docid": "src/turbojpeg.h",
        "startline": 1104,
        "endline": 1128
      },
      {
        "docid": "src/tjbench.c",
        "startline": 97,
        "endline": 122
      },
      {
        "docid": "src/tjbench.c",
        "startline": 101,
        "endline": 102
      },
      {
        "docid": "src/tjbench.c",
        "startline": 116,
        "endline": 118
      },
      {
        "docid": "src/tjutil.h",
        "startline": 45,
        "endline": 51
      },
      {
        "docid": "src/tjutil.h",
        "startline": 53,
        "endline": 53
      }
    ],
    "function_summary": "Lines 174-196 contain the function signature and initial variable declarations for the `decomp()` function. This function performs JPEG decompression testing by decompressing JPEG image buffers into a destination buffer, supporting features like tiling, scaling, cropping, YUV conversion, and benchmarking. It declares local variables for file I/O, TurboJPEG handle, loop control, timing, pixel format handling, scaling calculations, tiling configuration, and buffer pointers needed throughout the decompression process."
  },
  {
    "instance_id": "Choser_CVE-2021-20205",
    "hits": [
      {
        "docid": "src/rdgif.c",
        "startline": 1,
        "endline": 127
      },
      {
        "docid": "src/rdgif.c",
        "startline": 140,
        "endline": 166
      },
      {
        "docid": "src/rdgif.c",
        "startline": 169,
        "endline": 177
      },
      {
        "docid": "src/rdgif.c",
        "startline": 344,
        "endline": 368
      },
      {
        "docid": "src/rdgif.c",
        "startline": 371,
        "endline": 383
      },
      {
        "docid": "src/rdgif.c",
        "startline": 390,
        "endline": 547
      },
      {
        "docid": "src/jerror.h",
        "startline": 1,
        "endline": 336
      },
      {
        "docid": "src/jmorecfg.h",
        "startline": 48,
        "endline": 52
      },
      {
        "docid": "src/jmorecfg.h",
        "startline": 99,
        "endline": 103
      },
      {
        "docid": "src/jmorecfg.h",
        "startline": 155,
        "endline": 155
      },
      {
        "docid": "src/jmorecfg.h",
        "startline": 203,
        "endline": 203
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 89,
        "endline": 93
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 264,
        "endline": 290
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 318,
        "endline": 340
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 345,
        "endline": 518
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 888,
        "endline": 890
      },
      {
        "docid": "src/jpeglib.h",
        "startline": 896,
        "endline": 939
      }
    ],
    "function_summary": "This code segment validates the GIF file header and version, reads the Logical Screen Descriptor to get image dimensions and global colormap information, allocates a colormap array, reads the global colormap if present, and then scans through the file to find the start of the image data. It handles three types of GIF data blocks: GIF terminator (';'), extension blocks ('!'), and image separators (','). When an image separator is found, it breaks out of the loop to process the image descriptor."
  },
  {
    "instance_id": "Choser_CVE-2021-29279",
    "hits": [
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 31,
        "endline": 35
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 37,
        "endline": 42
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 44,
        "endline": 83
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 163,
        "endline": 178
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 180,
        "endline": 223
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 294,
        "endline": 304
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 307,
        "endline": 340
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 342,
        "endline": 348
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 351,
        "endline": 384
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 386,
        "endline": 394
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 395,
        "endline": 397
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 399,
        "endline": 402
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 404,
        "endline": 405
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 407,
        "endline": 511
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 513,
        "endline": 793
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 63,
        "endline": 63
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 153,
        "endline": 153
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 199,
        "endline": 199
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 414,
        "endline": 415
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 441,
        "endline": 441
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 458,
        "endline": 458
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 494,
        "endline": 494
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 526,
        "endline": 526
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 544,
        "endline": 544
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 590,
        "endline": 590
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 663,
        "endline": 663
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 2231,
        "endline": 2231
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 66,
        "endline": 66
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 569,
        "endline": 569
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 785,
        "endline": 847
      }
    ],
    "function_summary": "Lines 390-545 of src/filters/reframe_flac.c contain core FLAC frame parsing and processing logic:\n\n1. **flac_dmx_crc16() function (lines 386-394)**: Computes CRC-16 checksum over a data buffer using the flac_dmx_crc16_table lookup table for FLAC frame validation.\n\n2. **Static lookup arrays (lines 395-402)**: Define valid FLAC block sizes and sample rates used during frame header parsing.\n\n3. **FLAC constants (lines 404-405)**: Define FLAC_CHANNELS (8) and FLAC_MID_SIDE (3) for channel configuration validation.\n\n4. **flac_parse_header() function (lines 407-511)**: Parses and validates a FLAC frame header by:\n   - Verifying sync word (0x7FFC)\n   - Extracting block size, sample rate, channel configuration, and bits per sample\n   - Computing and validating CRC-8 checksum on header\n   - Validating subframe type field\n   - Populating FLACHeader structure with parsed values\n\n5. **flac_dmx_process() function start (lines 513-545)**: Begins main packet processing loop that:\n   - Checks for error state and EOS conditions\n   - Retrieves input packets from the filter framework\n   - Manages internal buffer (flac_buffer) for incomplete frames\n   - Tracks byte offsets for packet property management\n   - Handles timestamp (CTS) initialization and propagation\n\nThis code segment is central to the FLAC demuxer's ability to parse raw FLAC bitstreams into valid frames with proper timing and validation."
  },
  {
    "instance_id": "Choser_CVE-2021-37972",
    "hits": [
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 1,
        "endline": 52
      },
      {
        "docid": "src/jchuff.c",
        "startline": 1,
        "endline": 200
      },
      {
        "docid": "src/jchuff.c",
        "startline": 322,
        "endline": 660
      },
      {
        "docid": "src/jutils.c",
        "startline": 59,
        "endline": 70
      },
      {
        "docid": "src/jpegint.h",
        "startline": 597,
        "endline": 597
      }
    ],
    "function_summary": "This code segment (lines 53-87) defines a lookup table called `jpeg_nbits_table` which is used to efficiently compute the number of bits required to represent the magnitude of a DCT coefficient in Huffman encoding. The table is organized in a reverse-lookup format: for a given coefficient value (used as an index), it returns how many bits are needed to represent that value. The table covers values from -32767 to +32767, with the entries arranged so that negative values (in the upper half) and positive values (in the lower half) both map to their bit-width requirements (0-15 bits). Following the table definition (lines 88-90) are macro definitions that provide convenient access to this table and a related `jpeg_mask_bits` table, with position-independent code (PIC) support."
  },
  {
    "instance_id": "Choser_CVE-2023-4754",
    "hits": [
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1414,
        "endline": 1551
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 144,
        "endline": 216
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1057,
        "endline": 1066
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 896,
        "endline": 935
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 190,
        "endline": 201
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 262,
        "endline": 285
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 65,
        "endline": 195
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 223,
        "endline": 239
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "include/gpac/list.h",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "include/gpac/color.h",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "include/gpac/maths.h",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "include/gpac/maths.h",
        "startline": 242,
        "endline": 290
      },
      {
        "docid": "include/gpac/scenegraph_vrml.h",
        "startline": 176,
        "endline": 185
      }
    ],
    "function_summary": "This code segment (lines 1423-1467 of swf_parse.c) implements the swf_def_font function which parses and defines SWF font definitions. It handles two font format revisions (DEFINEFONT and DEFINEFONT2). For revision 0, it reads a simple offset table and parses glyph shapes. For revision 1, it reads comprehensive font metadata including font name, unicode/ANSI flags, character codes, and optional layout information (ascent, descent, leading, glyph advances, and kerning data). The function allocates memory for font structures, reads glyph shape definitions via swf_parse_shape_def, and stores the font in the SWFReader's font list."
  },
  {
    "instance_id": "krrrlww_CVE-2019-15903",
    "hits": [
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 227,
        "endline": 421
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 241,
        "endline": 256
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 270,
        "endline": 280
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 282,
        "endline": 285
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 287,
        "endline": 294
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 319,
        "endline": 336
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 355,
        "endline": 393
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 394,
        "endline": 421
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 439,
        "endline": 444
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 664,
        "endline": 786
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 789,
        "endline": 796
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 644,
        "endline": 653
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3821,
        "endline": 4047
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 575,
        "endline": 576
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7805,
        "endline": 7827
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7830,
        "endline": 7920
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 584,
        "endline": 591
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 8109,
        "endline": 8199
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 84,
        "endline": 137
      }
    ],
    "function_summary": "This code segment (lines 4048-5254 in expat/lib/xmlparse.c) implements the latter half of the `storeAtts` function and includes several additional helper functions. The primary functionality is:\n\n1. **Namespace-aware attribute expansion** (lines 4048-4209): Expands prefixed attribute names to their full namespace URIs, detects duplicate attributes using a hash table (m_nsAtts), and handles namespace separators and triplets if configured.\n\n2. **Element name expansion** (lines 4216-4286): Expands the element type name using namespace bindings, constructing the full URI + localPart (+ prefix for triplets).\n\n3. **URI validation helper** (lines 4289-4398): The `is_rfc3986_uri_char` function validates characters against RFC 3986 URI syntax.\n\n4. **Namespace binding creation** (lines 4403-4564): The `addBinding` function creates and manages namespace bindings, validates reserved namespaces (xml, xmlns), checks for illegal namespace separator characters in URIs, and manages memory allocation for binding structures.\n\n5. **CDATA section processing** (lines 4569-4716): Functions `cdataSectionProcessor` and `doCdataSection` handle CDATA section parsing, tokenization, and character data handling.\n\n6. **DTD processing functions** (lines 4718-5254): Includes `ignoreSectionProcessor`, `doIgnoreSection`, `initializeEncoding`, `processXmlDecl`, `handleUnknownEncoding`, and prolog/entity processing functions for XML DTD and external entity handling."
  },
  {
    "instance_id": "krrrlww_CVE-2024-28757",
    "hits": [
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7796,
        "endline": 7802
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 227,
        "endline": 227
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 58,
        "endline": 60
      },
      {
        "docid": "expat/lib/internal.h",
        "startline": 58,
        "endline": 92
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7830,
        "endline": 7857
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7794,
        "endline": 7794
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 233,
        "endline": 239
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 229,
        "endline": 231
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7804,
        "endline": 7810
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7818,
        "endline": 7827
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7813,
        "endline": 7816
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1246,
        "endline": 1252
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 253,
        "endline": 256
      },
      {
        "docid": "expat/lib/siphash.h",
        "startline": 131,
        "endline": 142
      },
      {
        "docid": "expat/lib/siphash.h",
        "startline": 190,
        "endline": 201
      },
      {
        "docid": "expat/lib/siphash.h",
        "startline": 205,
        "endline": 227
      },
      {
        "docid": "expat/lib/siphash.h",
        "startline": 229,
        "endline": 267
      }
    ],
    "function_summary": "The `keyeq` function compares two null-terminated KEY strings (where KEY is a typedef for `const XML_Char *`) for equality. It iterates character-by-character comparing both strings; if all characters match and a null terminator is reached simultaneously, it returns XML_TRUE (indicating equality), otherwise it returns XML_FALSE (indicating inequality). This is a custom string equality comparison function used in the hash table lookup mechanism for XML parsing."
  },
  {
    "instance_id": "krrrlww_CVE-2019-20208",
    "hits": [
      {
        "docid": "src/isomedia/box_code_base.c",
        "startline": 5460,
        "endline": 5494
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 2170,
        "endline": 2198
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 738,
        "endline": 739
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 2221,
        "endline": 2261
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 636,
        "endline": 639
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 667,
        "endline": 680
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1210,
        "endline": 1258
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1232,
        "endline": 1244
      }
    ],
    "function_summary": "This code segment initializes the ordering of child boxes in a GF_SampleTableBox structure during the box sizing phase. It enforces the correct serialization order of child boxes according to ISO Base Media File Format specifications by calling gf_isom_check_position() for each child box field (SampleDescription, TimeToSample, CompositionOffset, and CompositionToDecode), passing a position counter that increments after each call to establish their relative positions within the parent box's child list."
  },
  {
    "instance_id": "Choser_CVE-2020-23266",
    "hits": [
      {
        "docid": "src/isomedia/box_code_base.c",
        "startline": 5413,
        "endline": 5522
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 2170,
        "endline": 2186
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 2221,
        "endline": 2261
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 738,
        "endline": 738
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 2188,
        "endline": 2198
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 650,
        "endline": 680
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 635,
        "endline": 639
      }
    ],
    "function_summary": "Lines 5462-5468 in `src/isomedia/box_code_base.c` enforce the correct ordering of child boxes within a GF_SampleTableBox structure during box parsing or construction. The code makes sequential calls to `gf_isom_check_position` for seven key child boxes (TimeToSample, CompositionOffset, CompositionToDecode, SyncSample, SampleDescription, SampleSize, SampleToChunk), passing the parent box pointer, each child box pointer, and a position counter. The `gf_isom_check_position` function verifies each child box is at the expected position in the parent's `child_boxes` list, and if not, repositions it by removing and reinserting at the correct index. This ensures the box hierarchy conforms to ISO Base Media File Format specifications."
  },
  {
    "instance_id": "Capsa_CVE-2022-26049",
    "hits": [
      {
        "docid": "src/main/java/com/diffplug/gradle/ZipMisc.java",
        "startline": 177,
        "endline": 190
      },
      {
        "docid": "src/main/java/com/diffplug/gradle/ZipMisc.java",
        "startline": 165,
        "endline": 168
      },
      {
        "docid": "src/main/java/com/diffplug/gradle/FileMisc.java",
        "startline": 95,
        "endline": 101
      },
      {
        "docid": "src/main/java/com/diffplug/gradle/ZipMisc.java",
        "startline": 1,
        "endline": 45
      }
    ],
    "function_summary": "This code segment extracts all entries from a zip file to a destination directory. It iterates through each entry in the zip input stream, validates the entry path to prevent zip-slip attacks (path traversal vulnerabilities), creates directories for directory entries, and for file entries, creates parent directories and copies the file content from the zip to the destination filesystem."
  },
  {
    "instance_id": "Capsa_CVE-2022-21675",
    "hits": [
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
        "startline": 46,
        "endline": 85
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
        "startline": 1,
        "endline": 27
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
        "startline": 44,
        "endline": 86
      }
    ],
    "function_summary": "This code segment (lines 46-85) implements a ZIP/JAR file extraction mechanism with security protection against Zip Slip attacks. It extracts all entries from a JAR file to a destination directory. The process: (1) establishes a canonical destination path to prevent path traversal attacks, (2) iterates through all JAR entries, (3) validates each entry's canonical path against the destination directory to detect Zip Slip exploits, (4) creates parent directories as needed, (5) skips directory entries (ending with \"/\"), and (6) writes file contents using byte-by-byte streaming from the JAR input stream to file output stream."
  },
  {
    "instance_id": "Capsa_CVE-2024-1594",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 589,
        "endline": 650
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 518,
        "endline": 586
      },
      {
        "docid": "mlflow/utils/validation.py",
        "startline": 108,
        "endline": 121
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 67,
        "endline": 113
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 50
      }
    ],
    "function_summary": "This function validates a single request parameter against a validation schema. It iterates through a list of validation functions (e.g., type checkers, required field checks) and applies them to the parameter value. If proto parsing succeeded, it skips type validators to avoid redundant checks. If any validation function raises an AssertionError, it catches the error, constructs an appropriate error message (either from the assertion message, a hardcoded missing value message for _assert_required, or a generic invalid value message with a type hint), and raises an MlflowException with INVALID_PARAMETER_VALUE error code. Returns None on successful validation."
  },
  {
    "instance_id": "Capsa_CVE-2024-1593",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 518,
        "endline": 586
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 589,
        "endline": 629
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 554,
        "endline": 562
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 565,
        "endline": 572
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 522,
        "endline": 541
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 544,
        "endline": 546
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 548,
        "endline": 552
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 575,
        "endline": 576
      },
      {
        "docid": "mlflow/utils/validation.py",
        "startline": 108,
        "endline": 122
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 50
      }
    ],
    "function_summary": "This code segment defines a global constant `_TYPE_VALIDATORS` (lines 579-586) which is a set containing references to six validation functions used for type checking HTTP request parameters. It also defines the function `_validate_param_against_schema` (lines 589-629) which validates a single request parameter against a specified validation schema. The function iterates through validation functions in the schema, skips type validators if protobuf parsing succeeded, executes each validation function on the parameter value, and raises an `MlflowException` with a standardized error message if any validation fails. This is part of the MLflow server's request validation infrastructure for ensuring API request parameters meet type and value requirements before processing."
  },
  {
    "instance_id": "zju-cve-2021-3729",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 28,
        "endline": 30
      },
      {
        "docid": "routes/web.php",
        "startline": 302,
        "endline": 315
      },
      {
        "docid": "app/Support/Http/Controllers/DateCalculation.php",
        "startline": 41,
        "endline": 50
      }
    ],
    "function_summary": "This code segment defines route group for budget limit management. It creates five HTTP routes under the '/budget-limits' prefix with 'budget-limits.' route name prefix, all protected by 'user-full-auth' middleware. The routes handle: creating budget limits (GET create with date parameters), editing budget limits (GET edit), showing budget limits (GET show), storing new budget limits (POST store), deleting budget limits (POST delete), and updating budget limits (POST update). All routes map to controller methods in the Budget\\BudgetLimitController class within the FireflyIII\\Http\\Controllers namespace. The create route validates start_date and end_date parameters against the DATEFORMAT constant defined earlier in the file as a regex pattern '(19|20)[0-9]{2}-?[0-9]{2}-?[0-9]{2}'."
  },
  {
    "instance_id": "zju-cve-2021-3730",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 253,
        "endline": 269
      },
      {
        "docid": "routes/web.php",
        "startline": 235,
        "endline": 251
      },
      {
        "docid": "routes/web.php",
        "startline": 28,
        "endline": 30
      },
      {
        "docid": "routes/web.php",
        "startline": 24,
        "endline": 24
      }
    ],
    "function_summary": "This code segment defines a route group for subscription management that shares the same routing structure as bills. It creates 8 routes (index, rescan, create, edit, delete, show, store, update, destroy, and set-order) under the '/subscriptions' prefix, all protected by 'user-full-auth' middleware. The routes map to Bill controllers (IndexController, ShowController, CreateController, EditController, DeleteController) in the FireflyIII\\Http\\Controllers namespace, reusing bill functionality for subscription management."
  },
  {
    "instance_id": "zju-cve-2021-3819",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 28,
        "endline": 30
      },
      {
        "docid": "routes/web.php",
        "startline": 337,
        "endline": 341
      },
      {
        "docid": "app/Http/Controllers/Category/ShowController.php",
        "startline": 1,
        "endline": 154
      },
      {
        "docid": "app/Support/Http/Controllers/PeriodOverview.php",
        "startline": 141,
        "endline": 163
      },
      {
        "docid": "app/Helpers/Collector/GroupCollectorInterface.php",
        "startline": 550,
        "endline": 550
      },
      {
        "docid": "app/Repositories/Category/CategoryRepositoryInterface.php",
        "startline": 51,
        "endline": 51
      },
      {
        "docid": "app/Repositories/Category/CategoryRepositoryInterface.php",
        "startline": 72,
        "endline": 72
      },
      {
        "docid": "app/Repositories/Category/CategoryRepositoryInterface.php",
        "startline": 74,
        "endline": 74
      }
    ],
    "function_summary": "This code segment defines a Laravel route constraint that validates date format for the `start_date` and `end_date` route parameters. It ensures that when the route `categories.show` is accessed with optional date parameters, both dates must match the DATEFORMAT pattern `(19|20)[0-9]{2}-?[0-9]{2}-?[0-9]{2}` (which accepts dates from years 1900-2099 in YYYY-MM-DD or YYYYMMDD format). The route maps GET requests to the `Category\\ShowController@show` method, allowing users to view category transactions filtered by date range."
  },
  {
    "instance_id": "zju-cve-2021-3901",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 28,
        "endline": 29
      },
      {
        "docid": "routes/web.php",
        "startline": 195,
        "endline": 202
      },
      {
        "docid": "app/Http/Controllers/Account/ReconcileController.php",
        "startline": 1,
        "endline": 265
      },
      {
        "docid": "app/Models/Account.php",
        "startline": 1,
        "endline": 251
      },
      {
        "docid": "app/Http/Controllers/Controller.php",
        "startline": 1,
        "endline": 163
      },
      {
        "docid": "app/Repositories/Journal/JournalRepositoryInterface.php",
        "startline": 101,
        "endline": 103
      },
      {
        "docid": "app/Repositories/Journal/JournalRepository.php",
        "startline": 174,
        "endline": 179
      },
      {
        "docid": "app/Factory/TransactionGroupFactory.php",
        "startline": 1,
        "endline": 104
      },
      {
        "docid": "app/Enums/TransactionTypeEnum.php",
        "startline": 27,
        "endline": 34
      },
      {
        "docid": "app/Enums/AccountTypeEnum.php",
        "startline": 26,
        "endline": 40
      }
    ],
    "function_summary": "Defines two POST route handlers for account reconciliation operations. The first route (lines 196-198) handles the index/display page for reconciliation with optional start and end dates. The second route (lines 199-202) handles the submission of reconciliation data. Both routes validate date parameters using the DATEFORMAT constant (defined as a regex pattern on line 29) and route to the ReconcileController methods for an authenticated user's account."
  },
  {
    "instance_id": "zju-cve-2021-3921",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 83,
        "endline": 89
      },
      {
        "docid": "app/Http/Kernel.php",
        "startline": 95,
        "endline": 100
      },
      {
        "docid": "app/Support/Domain.php",
        "startline": 31,
        "endline": 34
      }
    ],
    "function_summary": "This code segment defines a route group for system health check endpoint. It registers a GET route at `/health` that maps to the `HealthcheckController@check` method with route name `healthcheck`. The route group applies the `binders-only` middleware and sets the namespace to `FireflyIII\\Http\\Controllers\\System`."
  },
  {
    "instance_id": "zju-cve-2021-4005",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 727,
        "endline": 729
      },
      {
        "docid": "app/Models/ObjectGroup.php",
        "startline": 1,
        "endline": 111
      },
      {
        "docid": "app/Repositories/ObjectGroup/ObjectGroupRepository.php",
        "startline": 75,
        "endline": 85
      },
      {
        "docid": "app/Support/Http/Controllers/UserNavigation.php",
        "startline": 49,
        "endline": 56
      },
      {
        "docid": "app/Support/Http/Controllers/UserNavigation.php",
        "startline": 143,
        "endline": 151
      }
    ],
    "function_summary": "This code segment defines two web routes for object group deletion functionality in the Firefly III application. The routes are protected by the 'user-full-auth' middleware and are prefixed with 'groups' (but aliased as 'object-groups.'). Line 728 defines a GET route to display the delete confirmation page, and line 729 defines a POST route to actually destroy the object group. Both routes use route model binding to automatically resolve the {objectGroup} parameter to an ObjectGroup model instance based on the URL parameter."
  },
  {
    "instance_id": "zju-cve-2021-4015",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 1079,
        "endline": 1127
      },
      {
        "docid": "app/Http/Controllers/Report/TagController.php",
        "startline": 1,
        "endline": 551
      },
      {
        "docid": "app/Repositories/Tag/TagRepositoryInterface.php",
        "startline": 1,
        "endline": 133
      },
      {
        "docid": "app/Models/Tag.php",
        "startline": 1,
        "endline": 112
      },
      {
        "docid": "app/Models/Account.php",
        "startline": 1,
        "endline": 251
      },
      {
        "docid": "routes/web.php",
        "startline": 28,
        "endline": 30
      }
    ],
    "function_summary": "This code segment defines a Laravel route group for tag-related report data endpoints. It configures middleware for authentication, sets the namespace to the Report controllers, defines a URL prefix 'report-data/tag', and a route name prefix 'report-data.tag.'. The group contains a callback function that will define routes for tag report data operations (accounts, tags, account-per-tag, top-expenses, avg-expenses, top-income, avg-income)."
  },
  {
    "instance_id": "zju-cve-2020-21564",
    "hits": [
      {
        "docid": "data/inc/files.php",
        "startline": 34,
        "endline": 65
      },
      {
        "docid": "data/inc/functions.all.php",
        "startline": 255,
        "endline": 259
      },
      {
        "docid": "data/inc/functions.all.php",
        "startline": 272,
        "endline": 293
      },
      {
        "docid": "data/inc/lang/en.php",
        "startline": 37,
        "endline": 37
      },
      {
        "docid": "data/inc/lang/en.php",
        "startline": 175,
        "endline": 182
      }
    ],
    "function_summary": "This code segment performs security validation on an uploaded file to prevent .htaccess file uploads and prepares for file extension validation. Line 40-41 checks if the filename is exactly \".htaccess\" or starts with \".htaccess\" (to catch variations like \".htaccess.txt\"), and displays an error if true. Lines 43-44 extract the last 4 and 5 characters of the filename to prepare for subsequent dangerous file extension checks against a blocklist."
  },
  {
    "instance_id": "zju-cve-2020-29607",
    "hits": [
      {
        "docid": "files/.htaccess",
        "startline": 6,
        "endline": 11
      },
      {
        "docid": "images/.htaccess",
        "startline": 6,
        "endline": 10
      },
      {
        "docid": "data/trash/files/.htaccess",
        "startline": 7,
        "endline": 11
      },
      {
        "docid": "data/themes/.htaccess",
        "startline": 6,
        "endline": 10
      },
      {
        "docid": "files/.htaccess",
        "startline": 1,
        "endline": 4
      },
      {
        "docid": "files/.htaccess",
        "startline": 12,
        "endline": 19
      }
    ],
    "function_summary": "This code segment configures Apache to prevent execution of .phtml files and CGI scripts within the files/ directory. The FilesMatch directive matches files with .phtml extensions and sets their handler to \"None\", which prevents Apache from processing them as server-side scripts. The Options -ExecCGI directive disables CGI script execution for this directory, blocking the execution of CGI programs even if they have appropriate file permissions."
  },
  {
    "instance_id": "zju-cve-2021-36440",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 10,
        "endline": 28
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 87,
        "endline": 112
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 114,
        "endline": 130
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 184,
        "endline": 207
      }
    ],
    "function_summary": "Lines 25-30 perform the following operations: execute a cURL request to retrieve response content from the remote URL, close the cURL handle to release resources, and directly echo the response content to the output stream."
  },
  {
    "instance_id": "zju-cve-2022-0409",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 16,
        "endline": 122
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 298,
        "endline": 382
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 580,
        "endline": 603
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 612,
        "endline": 623
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      },
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 1,
        "endline": 14
      }
    ],
    "function_summary": "Lines 75-80 check if an uploaded file is referenced in page content. If the file's 'sign' field exists and is found in any page's content (searched using LIKE pattern matching), the code sets a flag ($referenced = true) and continues to the next file, marking it as \"in use\" rather than \"unused\"."
  },
  {
    "instance_id": "zju-cve-2022-0950",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 107,
        "endline": 121
      },
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 16,
        "endline": 106
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 87,
        "endline": 112
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 298,
        "endline": 382
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 58,
        "endline": 66
      },
      {
        "docid": "server/Application/Api/Model/AttachmentModel.class.php",
        "startline": 1,
        "endline": 342
      },
      {
        "docid": "server/Application/Api/Model/UserModel.class.php",
        "startline": 14,
        "endline": 17
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 580,
        "endline": 603
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 612,
        "endline": 623
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      }
    ],
    "function_summary": "This code performs pagination on an in-memory array ($unused) by calculating the offset and slicing the array to return a subset of results. Line 109 calculates the maximum offset as ($page - 1) * $count, ensuring it's at least 0. Line 110 uses array_slice() to extract $count items from the $unused array starting at the calculated offset, producing a paginated list of unused attachment files."
  },
  {
    "instance_id": "zju-cve-2022-1034",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 30,
        "endline": 98
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 43,
        "endline": 66
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 69,
        "endline": 82
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 87,
        "endline": 112
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 114,
        "endline": 130
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 184,
        "endline": 207
      },
      {
        "docid": "server/Application/Api/Conf/config.php",
        "startline": 10,
        "endline": 42
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 1226,
        "endline": 1341
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      },
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 174,
        "endline": 202
      },
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 236,
        "endline": 257
      }
    ],
    "function_summary": "Lines 29-34 define the beginning of the `download()` method in the `AdminUpdateController` class. This method is responsible for downloading the latest version update package for the ShowDoc application. It first verifies that the user is logged in and has administrator privileges by calling `checkLogin()` and `checkAdmin()` methods, then sets extended execution time and memory limits to handle large file downloads."
  },
  {
    "instance_id": "zju-cve-2025-52886",
    "hits": [
      {
        "docid": "poppler/Annot.cc",
        "startline": 1678,
        "endline": 1696
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 361,
        "endline": 388
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 219,
        "endline": 279
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 576,
        "endline": 636
      },
      {
        "docid": "goo/GooString.h",
        "startline": 55,
        "endline": 238
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7617,
        "endline": 7637
      }
    ],
    "function_summary": "This code segment is part of the `setDrawColor` method in the `AnnotAppearanceBuilder` class. It sets the drawing color for PDF annotation appearances by converting color values from an `AnnotColor` object into PDF stream operators. The method handles four color spaces: CMYK (using 'k'/'K' operators), RGB (using 'rg'/'RG' operators), Gray (using 'g'/'G' operators), and Transparent (no operation). The `fill` parameter determines whether to use filling operators (lowercase for fill) or stroking operators (uppercase for stroke). The color values are formatted as floating-point numbers with 5 decimal places and appended to the appearance stream buffer."
  },
  {
    "instance_id": "zju-cve-2017-12944",
    "hits": [
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 740,
        "endline": 815
      },
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 3347,
        "endline": 3353
      },
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 3355,
        "endline": 3373
      },
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 3829,
        "endline": 3835
      },
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 57,
        "endline": 67
      },
      {
        "docid": "libtiff/tif_dir.h",
        "startline": 53,
        "endline": 66
      },
      {
        "docid": "libtiff/tiff.h",
        "startline": 145,
        "endline": 164
      },
      {
        "docid": "libtiff/tiffiop.h",
        "startline": 112,
        "endline": 149
      }
    ],
    "function_summary": "This code segment handles reading signed 32-bit integer values from TIFF directory entries when the stored data type is TIFF_SLONG (32-bit signed integer). Lines 786-787 directly read the signed long value from the directory entry offset field and return success. This is part of a type conversion system within the TIFFReadDirEntrySlong function that converts various TIFF data types (BYTE, SBYTE, SHORT, SSHORT, LONG, SLONG, LONG8, SLONG8) into a signed 32-bit integer output value."
  },
  {
    "instance_id": "zju-cve-2025-54418",
    "hits": [
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 84,
        "endline": 88
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 73,
        "endline": 91
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 199,
        "endline": 221
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 75,
        "endline": 76
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 281,
        "endline": 295
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 53,
        "endline": 60
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 74,
        "endline": 81
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 34,
        "endline": 39
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 185,
        "endline": 210
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 34,
        "endline": 34
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 49,
        "endline": 58
      },
      {
        "docid": "app/Config/Images.php",
        "startline": 1,
        "endline": 31
      }
    ],
    "function_summary": "This code segment constructs an ImageMagick command-line action string for resizing an image. It uses a ternary operator to determine whether to maintain the image aspect ratio. If `$maintainRatio` is true, the resize command uses standard width\u00d7height dimensions. If false, it appends an exclamation mark (`!`) to force exact dimensions (ignoring aspect ratio), with platform-specific escaping\u2014using a backslash on non-Windows systems and no escape character on Windows. Both source and destination paths are properly escaped using `escapeshellarg()` for shell command execution. The constructed action string is then passed to the `process()` method for execution."
  },
  {
    "instance_id": "zju-CVE-2021-27973",
    "hits": [
      {
        "docid": "admin/languages_installed.php",
        "startline": 24,
        "endline": 30
      },
      {
        "docid": "admin/include/languages.class.php",
        "startline": 9,
        "endline": 21
      },
      {
        "docid": "admin/include/languages.class.php",
        "startline": 188,
        "endline": 201
      },
      {
        "docid": "admin/include/languages.class.php",
        "startline": 123,
        "endline": 186
      },
      {
        "docid": "include/functions.inc.php",
        "startline": 2174,
        "endline": 2213
      },
      {
        "docid": "admin/include/languages.class.php",
        "startline": 29,
        "endline": 118
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 867,
        "endline": 870
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 830,
        "endline": 841
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 770,
        "endline": 828
      },
      {
        "docid": "include/constants.php",
        "startline": 11,
        "endline": 11
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 1494,
        "endline": 1497
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 1425,
        "endline": 1428
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 1396,
        "endline": 1423
      },
      {
        "docid": "admin/languages_installed.php",
        "startline": 14,
        "endline": 17
      },
      {
        "docid": "admin/languages_installed.php",
        "startline": 19,
        "endline": 19
      },
      {
        "docid": "admin/languages_installed.php",
        "startline": 23,
        "endline": 23
      },
      {
        "docid": "admin/languages_installed.php",
        "startline": 32,
        "endline": 40
      }
    ],
    "function_summary": "Lines 24-30 instantiate the `languages` class, call its `get_db_languages()` method to populate database language data, and then validate two GET parameters: `action` must match a specific pattern (activate|deactivate|set_default|delete), and `language` must match one of the keys from the file system languages array (`$languages->fs_languages`). This implements input validation for language management actions."
  },
  {
    "instance_id": "zju-cve-2024-56408",
    "hits": [
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 84,
        "endline": 88
      },
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 16,
        "endline": 21
      },
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 83,
        "endline": 99
      },
      {
        "docid": "src/PhpSpreadsheet/Calculation/Engineering/ConvertUOM.php",
        "startline": 536,
        "endline": 573
      },
      {
        "docid": "src/PhpSpreadsheet/Helper/Sample.php",
        "startline": 188,
        "endline": 192
      },
      {
        "docid": "src/PhpSpreadsheet/Shared/StringHelper.php",
        "startline": 676,
        "endline": 706
      },
      {
        "docid": "src/PhpSpreadsheet/Settings.php",
        "startline": 84,
        "endline": 87
      }
    ],
    "function_summary": "This code segment extracts form POST data into local variables for unit conversion processing. It assigns the user-submitted quantity value to `$quantity`, the source unit code to `$fromUnit`, and the destination unit code to `$toUnit`."
  },
  {
    "instance_id": "zju-cve-2023-41892",
    "hits": [
      {
        "docid": "src/controllers/AssetIndexesController.php",
        "startline": 38,
        "endline": 46
      },
      {
        "docid": "src/web/Controller.php",
        "startline": 91,
        "endline": 103
      }
    ],
    "function_summary": "This code segment defines the behaviors() method that configures the AssetIndexesController to use the UtilityAccess filter. It merges the parent controller's behaviors with a new UtilityAccess behavior that restricts access to this controller's actions to only users who have permission to access the AssetIndexes utility. This is a Yii2 behavior configuration that acts as an authorization filter, executed before any controller action runs."
  },
  {
    "instance_id": "zju-cve-2021-26120",
    "hits": [
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 383,
        "endline": 386
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 349,
        "endline": 420
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 352,
        "endline": 394
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 350,
        "endline": 361
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 349,
        "endline": 349
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 269,
        "endline": 280
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 286,
        "endline": 299
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 16,
        "endline": 22
      },
      {
        "docid": "tests/PHPUnit_Smarty.php",
        "startline": 14,
        "endline": 14
      },
      {
        "docid": "src/Security.php",
        "startline": 378,
        "endline": 383
      },
      {
        "docid": "src/Security.php",
        "startline": 135,
        "endline": 135
      },
      {
        "docid": "src/Smarty.php",
        "startline": 251,
        "endline": 251
      }
    ],
    "function_summary": "The `stream_tell()` method is part of the `ResourceStreamSecurity` class (a custom PHP stream wrapper implementation used for testing). It returns the current read/write position within the stream by returning the value of the private property `$this->position`."
  },
  {
    "instance_id": "zju-cve-2021-32682",
    "hits": [
      {
        "docid": "php/elFinder.class.php",
        "startline": 415,
        "endline": 420
      },
      {
        "docid": "php/elFinder.class.php",
        "startline": 1429,
        "endline": 1437
      },
      {
        "docid": "php/elFinder.class.php",
        "startline": 1317,
        "endline": 1330
      },
      {
        "docid": "php/elFinder.class.php",
        "startline": 1115,
        "endline": 1358
      },
      {
        "docid": "php/elFinder.class.php",
        "startline": 156,
        "endline": 156
      },
      {
        "docid": "php/elFinder.class.php",
        "startline": 907,
        "endline": 914
      }
    ],
    "function_summary": "The code segment declares a protected class property `$removeContentSaveIds` that serves as a tracking mechanism for session cleanup during URL-based content uploads. This array stores IDs that should be removed from the session variable 'urlContentSaveIds' after command execution completes. The property acts as a temporary staging area: IDs are marked for removal during command processing via the `removeUrlContentSaveId()` method, then the actual session cleanup occurs in the `exec()` method's cleanup phase (lines 1317-1330). The implementation uses array keys for O(1) lookup performance, with boolean true values."
  },
  {
    "instance_id": "zju-cve-2016-5734",
    "hits": [
      {
        "docid": "src/Menu.php",
        "startline": 168,
        "endline": 177
      },
      {
        "docid": "src/ConfigStorage/Relation.php",
        "startline": 545,
        "endline": 566
      },
      {
        "docid": "src/ConfigStorage/RelationParameters.php",
        "startline": 1,
        "endline": 429
      },
      {
        "docid": "src/ConfigStorage/Features/ColumnCommentsFeature.php",
        "startline": 1,
        "endline": 16
      },
      {
        "docid": "src/Config.php",
        "startline": 99,
        "endline": 100
      },
      {
        "docid": "src/Config.php",
        "startline": 267,
        "endline": 268
      },
      {
        "docid": "src/Config.php",
        "startline": 796,
        "endline": 802
      },
      {
        "docid": "src/Config.php",
        "startline": 806,
        "endline": 806
      },
      {
        "docid": "src/Menu.php",
        "startline": 36,
        "endline": 44
      },
      {
        "docid": "src/Menu.php",
        "startline": 135,
        "endline": 181
      }
    ],
    "function_summary": "Lines 167-178 handle the display of database comments in the breadcrumb navigation. When no table is selected (else branch of table check), it retrieves relation parameters, checks if the column comments feature is enabled, and if so, fetches the database comment from the relation storage tables using the getDbComment method. This comment is displayed in the database breadcrumb tooltip."
  },
  {
    "instance_id": "zju-cve-2018-1000019",
    "hits": [
      {
        "docid": "interface/globals.php",
        "startline": 1,
        "endline": 784
      },
      {
        "docid": "library/sanitize.inc.php",
        "startline": 60,
        "endline": 63
      },
      {
        "docid": "library/htmlspecialchars.inc.php",
        "startline": 150,
        "endline": 153
      },
      {
        "docid": "library/htmlspecialchars.inc.php",
        "startline": 213,
        "endline": 216
      },
      {
        "docid": "library/htmlspecialchars.inc.php",
        "startline": 247,
        "endline": 250
      },
      {
        "docid": "library/sql.inc.php",
        "startline": 356,
        "endline": 379
      },
      {
        "docid": "library/translation.inc.php",
        "startline": 12,
        "endline": 61
      }
    ],
    "function_summary": "Lines 1-6 of interface/billing/get_claim_file.php contain the opening PHP tag (line 1), a blank line (line 2), and a PHPDoc comment block (lines 3-6) that provides metadata about the file including its name, package (OpenEMR), a link to the OpenEMR website, and the start of author information. This is a standard documentation header that describes the file's purpose and provides attribution information."
  },
  {
    "instance_id": "zju-cve-2022-2732",
    "hits": [
      {
        "docid": "interface/patient_file/summary/add_edit_amendments.php",
        "startline": 24,
        "endline": 30
      },
      {
        "docid": "src/Common/Acl/AclMain.php",
        "startline": 138,
        "endline": 234
      },
      {
        "docid": "src/Common/Twig/TwigContainer.php",
        "startline": 42,
        "endline": 88
      },
      {
        "docid": "library/translation.inc.php",
        "startline": 12,
        "endline": 60
      },
      {
        "docid": "interface/globals.php",
        "startline": 315,
        "endline": 323
      },
      {
        "docid": "src/Core/Kernel.php",
        "startline": 29,
        "endline": 100
      }
    ],
    "function_summary": "This code segment performs access control validation for the amendments feature. It checks if the user has permission to access the \"patients/amendment\" ACO (Access Control Object). If the user lacks proper access, it renders an unauthorized error page and terminates script execution. If access is granted, it then determines and stores whether the user has write or add-only permissions for amendments."
  },
  {
    "instance_id": "zju-CVE-2022-0179",
    "hits": [
      {
        "docid": "app/Http/Controllers/BulkAssetModelsController.php",
        "startline": 34,
        "endline": 38
      },
      {
        "docid": "app/Http/Controllers/BulkAssetModelsController.php",
        "startline": 20,
        "endline": 42
      },
      {
        "docid": "app/Models/AssetModel.php",
        "startline": 120,
        "endline": 123
      },
      {
        "docid": "app/Models/AssetModel.php",
        "startline": 22,
        "endline": 75
      }
    ],
    "function_summary": "This code segment counts the number of asset models that have zero associated assets. It iterates through a collection of models (retrieved with their asset counts), checks if each model's assets_count equals zero, and increments a counter for each model that meets this condition. The resulting valid_count is then passed to the bulk-delete view to inform the user how many models can be safely deleted."
  },
  {
    "instance_id": "zju-cve-2023-34448",
    "hits": [
      {
        "docid": "system/src/Grav/Common/Twig/Extension/GravExtension.php",
        "startline": 75,
        "endline": 90
      },
      {
        "docid": "system/src/Grav/Common/Twig/Extension/GravExtension.php",
        "startline": 893,
        "endline": 924
      },
      {
        "docid": "system/src/Grav/Common/Language/Language.php",
        "startline": 482,
        "endline": 528
      },
      {
        "docid": "system/src/Grav/Common/Language/Language.php",
        "startline": 631,
        "endline": 634
      }
    ],
    "function_summary": "This code segment handles the flattening of substitution arrays for translation parameters in admin mode. When two arguments are passed to the translate function where the second argument is an array (e.g., `t('KEY', ['var1', 'var2'])`), it pops the substitution array from `$args`, then merges it back into `$args` to flatten the structure. This transforms `$args = ['KEY', ['var1', 'var2']]` into `$args = ['KEY', 'var1', 'var2']`, preparing the arguments for the admin translate method that expects a flat array of arguments."
  },
  {
    "instance_id": "zju-cve-2020-19217",
    "hits": [
      {
        "docid": "admin/batch_manager.php",
        "startline": 128,
        "endline": 134
      },
      {
        "docid": "include/constants.php",
        "startline": 39,
        "endline": 39
      },
      {
        "docid": "include/functions.inc.php",
        "startline": 2174,
        "endline": 2214
      },
      {
        "docid": "include/functions_category.inc.php",
        "startline": 301,
        "endline": 324
      },
      {
        "docid": "admin/batch_manager.php",
        "startline": 468,
        "endline": 500
      },
      {
        "docid": "admin/batch_manager.php",
        "startline": 87,
        "endline": 198
      },
      {
        "docid": "include/common.inc.php",
        "startline": 61,
        "endline": 61
      }
    ],
    "function_summary": "This code segment validates and stores category filtering parameters from a POST form submission in the batch manager. It checks if the \"filter_category_use\" parameter is set, validates the \"filter_category\" parameter as a numeric ID using the PATTERN_ID constant, stores the validated category ID in the session's bulk_manager_filter array, and if the \"filter_category_recursive\" checkbox is set, it stores a flag to enable recursive filtering (including subcategories)."
  },
  {
    "instance_id": "sjtu_cve-2023-6831",
    "hits": [
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 405,
        "endline": 469
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 28,
        "endline": 69
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 277,
        "endline": 283
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 394,
        "endline": 402
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 19,
        "endline": 20
      },
      {
        "docid": "mlflow/utils/file_utils.py",
        "startline": 496,
        "endline": 509
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 1
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 1,
        "endline": 1
      }
    ],
    "function_summary": "Lines 423-446 contain the second half of the `dbfs_hdfs_uri_to_fuse_path` function (lines 420-426) and the complete `resolve_uri_if_local` function (lines 429-469). The `dbfs_hdfs_uri_to_fuse_path` function converts DBFS HDFS URIs (e.g., \"dbfs:/my-directory\") to DBFS FUSE paths (e.g., \"/dbfs/my-directory\") by validating the URI starts with the expected prefix and then stripping the DBFS HDFS prefix and prepending the DBFS FUSE prefix. The `resolve_uri_if_local` function resolves relative local file paths to absolute paths relative to the current working directory, handling both scheme-less paths and file:// URIs differently on Windows vs. non-Windows systems, returning either a file:// URI or a POSIX-style absolute path depending on the platform and original URI format."
  },
  {
    "instance_id": "sjtu_cve-2024-0520",
    "hits": [
      {
        "docid": "mlflow/data/http_dataset_source.py",
        "startline": 27,
        "endline": 28
      },
      {
        "docid": "mlflow/data/http_dataset_source.py",
        "startline": 1,
        "endline": 10
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 67,
        "endline": 113
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 91,
        "endline": 91
      },
      {
        "docid": "mlflow/utils/file_utils.py",
        "startline": 729,
        "endline": 734
      },
      {
        "docid": "mlflow/utils/rest_utils.py",
        "startline": 35,
        "endline": 40
      }
    ],
    "function_summary": "The code segment (lines 37-74) is a property getter for the `url` attribute that returns the HTTP/HTTPS URL of the dataset source. This property is part of the `HTTPDatasetSource` class, which represents a dataset stored at a web location. The property simply returns the private `_url` attribute that was set during initialization."
  }
]
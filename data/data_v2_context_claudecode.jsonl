[
  {
    "instance_id": "GioldDiorld_CVE-2016-9829",
    "hits": [
      {
        "docid": "util/parser.c",
        "startline": 1645,
        "endline": 1670
      },
      {
        "docid": "util/parser.h",
        "startline": 38,
        "endline": 69
      },
      {
        "docid": "util/swftypes.h",
        "startline": 26,
        "endline": 28
      },
      {
        "docid": "util/swftypes.h",
        "startline": 955,
        "endline": 960
      },
      {
        "docid": "util/swftypes.h",
        "startline": 1135,
        "endline": 1141
      },
      {
        "docid": "util/read.h",
        "startline": 4,
        "endline": 4
      },
      {
        "docid": "util/read.h",
        "startline": 14,
        "endline": 17
      },
      {
        "docid": "util/parser.c",
        "startline": 37,
        "endline": 46
      },
      {
        "docid": "util/parser.c",
        "startline": 809,
        "endline": 833
      }
    ],
    "function_summary": "This code segment is part of the `parseSWF_DEFINEFONT` function that parses a SWF DefineFont block (version 1). It reads the font ID and calculates the number of glyphs from the first offset value, then reads the offset table for all glyphs, and finally parses the shape data for each glyph. Specifically:\n1. Reads a 16-bit font ID from the file\n2. Reads the first 16-bit offset value which indicates where the first glyph shape starts\n3. Calculates the total number of glyphs by dividing firstOffset by 2 (since each offset is 2 bytes)\n4. Registers this font info with the global Movie structure\n5. Allocates memory for the offset table array and populates it by reading remaining offsets\n6. Allocates memory for the glyph shape table\n7. Iterates through each glyph, calculating the length of each glyph's shape data and parsing it using parseSWF_SHAPE"
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-11728",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 859,
        "endline": 869
      },
      {
        "docid": "util/swftypes.h",
        "startline": 48,
        "endline": 54
      },
      {
        "docid": "util/swftypes.h",
        "startline": 235,
        "endline": 249
      },
      {
        "docid": "util/swftypes.h",
        "startline": 460,
        "endline": 532
      },
      {
        "docid": "util/action.h",
        "startline": 21,
        "endline": 30
      },
      {
        "docid": "src/blocks/error.h",
        "startline": 10,
        "endline": 42
      },
      {
        "docid": "util/decompile.c",
        "startline": 872,
        "endline": 884
      },
      {
        "docid": "util/decompile.c",
        "startline": 952,
        "endline": 989
      },
      {
        "docid": "util/decompile.c",
        "startline": 1000,
        "endline": 1297
      },
      {
        "docid": "util/decompile.c",
        "startline": 1191,
        "endline": 1230
      },
      {
        "docid": "util/decompile.c",
        "startline": 1232,
        "endline": 1296
      },
      {
        "docid": "util/decompile.c",
        "startline": 1341,
        "endline": 1367
      },
      {
        "docid": "util/decompile.c",
        "startline": 1488,
        "endline": 1522
      },
      {
        "docid": "util/decompile.c",
        "startline": 2265,
        "endline": 2546
      }
    ],
    "function_summary": "This code segment (lines 861-868) defines an inline helper function `OpCode()` that safely retrieves the action code from a SWF action at a given position in an action array. It performs bounds checking and returns -999 if the index is out of bounds or zero, otherwise returns the ActionCode field from the specified action's SWF_ACTIONRECORD structure."
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-11729",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 859,
        "endline": 869
      },
      {
        "docid": "util/swftypes.h",
        "startline": 50,
        "endline": 54
      },
      {
        "docid": "util/swftypes.h",
        "startline": 460,
        "endline": 532
      },
      {
        "docid": "src/actiontypes.h",
        "startline": 25,
        "endline": 141
      },
      {
        "docid": "src/blocks/error.h",
        "startline": 24,
        "endline": 32
      },
      {
        "docid": "util/decompile.c",
        "startline": 13,
        "endline": 19
      },
      {
        "docid": "util/decompile.c",
        "startline": 874,
        "endline": 878
      },
      {
        "docid": "util/decompile.c",
        "startline": 859,
        "endline": 869
      }
    ],
    "function_summary": "This code segment implements a bounds-checking helper function that safely retrieves the action code from a SWF action array. The function validates that the requested index 'n' is within valid bounds (greater than 0 and less than maxn), returns -999 as an error sentinel value if bounds are violated, and logs a warning message in DEBUG mode. If the index is valid, it returns the ActionCode field from the nth action's SWF_ACTIONRECORD structure."
  },
  {
    "instance_id": "GioldDiorld_CVE-2016-9827",
    "hits": [
      {
        "docid": "util/parser.c",
        "startline": 2749,
        "endline": 2761
      },
      {
        "docid": "util/parser.c",
        "startline": 39,
        "endline": 48
      },
      {
        "docid": "util/swftypes.h",
        "startline": 1601,
        "endline": 1604
      },
      {
        "docid": "util/swftypes.h",
        "startline": 2145,
        "endline": 2151
      },
      {
        "docid": "util/swftypes.h",
        "startline": 26,
        "endline": 26
      },
      {
        "docid": "util/swftypes.h",
        "startline": 38,
        "endline": 38
      },
      {
        "docid": "util/read.h",
        "startline": 23,
        "endline": 23
      },
      {
        "docid": "util/read.c",
        "startline": 143,
        "endline": 156
      },
      {
        "docid": "util/parser.c",
        "startline": 34,
        "endline": 34
      }
    ],
    "function_summary": "This code segment parses the SWF_PROTECT tag from a Flash (SWF) file. It initializes a parser structure for the SWF_PROTECT block, then conditionally reads password protection data: if the block length is non-zero, it reads the password bytes from the file; otherwise, it sets the Password field to NULL. Finally, it returns the populated parser structure."
  },
  {
    "instance_id": "GioldDiorld_CVE-2016-9831",
    "hits": [
      {
        "docid": "util/listjpeg.c",
        "startline": 24,
        "endline": 62
      },
      {
        "docid": "util/listjpeg.c",
        "startline": 2,
        "endline": 3
      },
      {
        "docid": "util/listjpeg.c",
        "startline": 5,
        "endline": 22
      }
    ],
    "function_summary": "Reads the length field of a JPEG block segment (2 bytes in big-endian format), prints the length value, then skips over the remaining block data by reading and discarding (length - 2) bytes."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-11225",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 3189,
        "endline": 3217
      },
      {
        "docid": "util/decompile.c",
        "startline": 805,
        "endline": 821
      },
      {
        "docid": "util/decompile.c",
        "startline": 304,
        "endline": 417
      },
      {
        "docid": "util/decompile.c",
        "startline": 419,
        "endline": 489
      },
      {
        "docid": "util/decompile.c",
        "startline": 678,
        "endline": 694
      },
      {
        "docid": "util/decompile.c",
        "startline": 186,
        "endline": 202
      },
      {
        "docid": "util/decompile.c",
        "startline": 2729,
        "endline": 2739
      },
      {
        "docid": "util/decompile.c",
        "startline": 195,
        "endline": 195
      },
      {
        "docid": "util/decompile.c",
        "startline": 210,
        "endline": 223
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 50
      },
      {
        "docid": "util/decompile.c",
        "startline": 804,
        "endline": 804
      },
      {
        "docid": "util/swftypes.h",
        "startline": 105,
        "endline": 110
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/swftypes.h",
        "startline": 50,
        "endline": 54
      }
    ],
    "function_summary": "This code segment implements the decompileSETTARGET function, which handles the decompilation of Flash ActionScript \"tellTarget\" statements. The function determines how many subsequent actions belong to the tellTarget block by scanning forward until it encounters specific terminating actions (SETTARGET, SETTARGET2, DEFINEFUNCTION, DEFINEFUNCTION2, or END). It retrieves the target name either from the stack (for type2) or from the action structure, outputs the formatted \"tellTarget\" statement with its opening brace, recursively decompiles the enclosed actions with increased indentation, outputs the closing brace, and returns the count of actions processed within the tellTarget block."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-8962",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 288,
        "endline": 301
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 49
      },
      {
        "docid": "util/decompile.c",
        "startline": 234,
        "endline": 271
      },
      {
        "docid": "util/decompile.c",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/decompile.c",
        "startline": 372,
        "endline": 420
      }
    ],
    "function_summary": "This code segment (lines 306-369) implements the `getString()` function, which converts a SWF_ACTIONPUSHPARAM structure into its string representation. The function handles various Flash ActionScript data types by examining the Type field and formatting the corresponding value accordingly. It allocates memory for string outputs, wraps strings in single quotes, handles special values (null, undefined, true/false), processes register references, converts numeric types to strings, retrieves constants from a global pool array, and handles variable/incremented/decremented types. The function returns dynamically allocated strings for most cases or static string constants for null/undefined/boolean values."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-8807",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 288,
        "endline": 301
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 49
      },
      {
        "docid": "util/decompile.c",
        "startline": 234,
        "endline": 271
      },
      {
        "docid": "util/decompile.c",
        "startline": 372,
        "endline": 420
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      }
    ],
    "function_summary": "This code segment implements the `getString()` function, which converts a Flash ActionScript parameter (SWF_ACTIONPUSHPARAM) into its string representation. The function handles multiple data types (strings, numbers, booleans, registers, constants, variables, etc.) and returns an appropriately formatted string. For most types, it dynamically allocates memory and formats the value as a string literal (enclosed in single quotes for string types). Special cases include register references (which may return the register's stored name or \"Rdd\" format), null/undefined literals, boolean true/false, numeric values, and constant pool lookups (which retrieve strings from a global pool array and apply special character escaping). The function returns different formats based on the parameter type, with incremented/decremented variables (types 11-12) returning raw strings without quotes."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-9132",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 474,
        "endline": 493
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/decompile.c",
        "startline": 289,
        "endline": 302
      },
      {
        "docid": "util/decompile.c",
        "startline": 50,
        "endline": 50
      },
      {
        "docid": "util/decompile.c",
        "startline": 495,
        "endline": 535
      },
      {
        "docid": "src/actiontypes.h",
        "startline": 145,
        "endline": 187
      },
      {
        "docid": "util/decompile.c",
        "startline": 304,
        "endline": 400
      },
      {
        "docid": "util/decompile.c",
        "startline": 402,
        "endline": 472
      }
    ],
    "function_summary": "This code segment is the `getInt()` function that extracts integer values from SWF ActionScript push parameters. It converts different data types (PUSH_FLOAT, PUSH_NULL, PUSH_REGISTER, PUSH_DOUBLE, PUSH_INT) stored in a `struct SWF_ACTIONPUSHPARAM` structure to their integer equivalents. The function handles type conversion, including casting floating-point numbers to integers, returning 0 for NULL, recursively resolving register values, and directly returning integer values. If the type is unrecognized, it prints an error message and returns 0."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-11226",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 3189,
        "endline": 3217
      },
      {
        "docid": "util/decompile.c",
        "startline": 105,
        "endline": 110
      },
      {
        "docid": "util/decompile.c",
        "startline": 818,
        "endline": 821
      },
      {
        "docid": "util/decompile.c",
        "startline": 195,
        "endline": 195
      },
      {
        "docid": "util/decompile.c",
        "startline": 210,
        "endline": 223
      },
      {
        "docid": "util/decompile.c",
        "startline": 985,
        "endline": 1001
      },
      {
        "docid": "util/decompile.c",
        "startline": 304,
        "endline": 417
      },
      {
        "docid": "util/decompile.c",
        "startline": 678,
        "endline": 695
      },
      {
        "docid": "util/decompile.c",
        "startline": 805,
        "endline": 806
      },
      {
        "docid": "util/decompile.c",
        "startline": 804,
        "endline": 804
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 50
      },
      {
        "docid": "util/decompile.c",
        "startline": 54,
        "endline": 54
      },
      {
        "docid": "util/swftypes.h",
        "startline": 105,
        "endline": 110
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/swftypes.h",
        "startline": 460,
        "endline": 532
      },
      {
        "docid": "util/decompile.c",
        "startline": 3245,
        "endline": 3393
      }
    ],
    "function_summary": "This code segment implements the decompilation of Flash ActionScript \"SetTarget\" and \"SetTarget2\" actions (lines 3192-3216 of util/decompile.c). It outputs ActionScript code in the form of `tellTarget('target_name') { ... }` blocks. The function retrieves the target name (either from the stack for type2 or from the action structure for type1), then scans forward to count how many subsequent actions belong to the tellTarget block (stopping when it encounters another SetTarget, DefineFunction, or End action). It then recursively decompiles those actions with increased indentation and returns the count of actions processed, allowing the caller to skip them."
  },
  {
    "instance_id": "Choser_CVE-2018-11813",
    "hits": [
      {
        "docid": "rdtarga.c",
        "startline": 52,
        "endline": 76
      },
      {
        "docid": "rdtarga.c",
        "startline": 30,
        "endline": 41
      },
      {
        "docid": "rdtarga.c",
        "startline": 44,
        "endline": 45
      },
      {
        "docid": "rdtarga.c",
        "startline": 90,
        "endline": 100
      },
      {
        "docid": "rdtarga.c",
        "startline": 176,
        "endline": 190
      },
      {
        "docid": "rdtarga.c",
        "startline": 242,
        "endline": 257
      },
      {
        "docid": "rdtarga.c",
        "startline": 336,
        "endline": 381
      },
      {
        "docid": "cdjpeg.h",
        "startline": 27,
        "endline": 38
      },
      {
        "docid": "jinclude.h",
        "startline": 85,
        "endline": 88
      },
      {
        "docid": "jmorecfg.h",
        "startline": 207,
        "endline": 209
      },
      {
        "docid": "jpeglib.h",
        "startline": 290,
        "endline": 292
      },
      {
        "docid": "jerror.h",
        "startline": 230,
        "endline": 232
      },
      {
        "docid": "cderror.h",
        "startline": 103,
        "endline": 112
      }
    ],
    "function_summary": "The code segment (lines 128-163) implements two functions for reading pixel data from Targa image files. `read_non_rle_pixel` (lines 128-135) reads uncompressed pixels by directly reading pixel_size bytes from the input file into the tga_pixel buffer. `read_rle_pixel` (lines 139-166) reads RLE (Run-Length Encoded) compressed pixels, handling two states: duplicating a previously read pixel (if dup_pixel_count > 0) or reading a new RLE block. When reading a new block, it checks bit 0x80 of the block header to determine if it's a duplicate-pixel block (repeated pixel) or a literal block (raw pixels), sets the appropriate counters, and then reads the next pixel from the file."
  },
  {
    "instance_id": "Choser_CVE-2018-19664",
    "hits": [
      {
        "docid": "wrbmp.c",
        "startline": 498,
        "endline": 511
      },
      {
        "docid": "cdjpeg.h",
        "startline": 156,
        "endline": 157
      },
      {
        "docid": "jpeglib.h",
        "startline": 217,
        "endline": 242
      },
      {
        "docid": "jmorecfg.h",
        "startline": 368,
        "endline": 394
      },
      {
        "docid": "cderror.h",
        "startline": 48,
        "endline": 48
      },
      {
        "docid": "wrbmp.c",
        "startline": 96,
        "endline": 171
      },
      {
        "docid": "wrbmp.c",
        "startline": 173,
        "endline": 206
      },
      {
        "docid": "wrbmp.c",
        "startline": 50,
        "endline": 74
      },
      {
        "docid": "jinclude.h",
        "startline": 72,
        "endline": 76
      },
      {
        "docid": "jinclude.h",
        "startline": 85,
        "endline": 88
      }
    ],
    "function_summary": "Lines 498-511 in wrbmp.c implement output format selection logic based on the JPEG decompression output color space. The code determines which pixel row writing function (put_gray_rows or put_pixel_rows) should be assigned to handle the image data, based on whether the output is grayscale, quantized color, RGB, RGB565, or CMYK. If the output color space is unsupported for BMP format, the code triggers an error exit with JERR_BMP_COLORSPACE."
  },
  {
    "instance_id": "Choser_CVE-2018-20330",
    "hits": [
      {
        "docid": "turbojpeg.c",
        "startline": 1963,
        "endline": 2019
      },
      {
        "docid": "turbojpeg.c",
        "startline": 52,
        "endline": 52
      },
      {
        "docid": "turbojpeg.c",
        "startline": 58,
        "endline": 58
      },
      {
        "docid": "turbojpeg.c",
        "startline": 105,
        "endline": 112
      },
      {
        "docid": "turbojpeg.c",
        "startline": 141,
        "endline": 165
      },
      {
        "docid": "turbojpeg.c",
        "startline": 167,
        "endline": 178
      },
      {
        "docid": "turbojpeg.c",
        "startline": 372,
        "endline": 372
      },
      {
        "docid": "turbojpeg.c",
        "startline": 428,
        "endline": 456
      },
      {
        "docid": "turbojpeg.c",
        "startline": 458,
        "endline": 470
      },
      {
        "docid": "turbojpeg.c",
        "startline": 1959,
        "endline": 1962
      },
      {
        "docid": "turbojpeg.h",
        "startline": 302,
        "endline": 304
      },
      {
        "docid": "turbojpeg.h",
        "startline": 160,
        "endline": 160
      },
      {
        "docid": "turbojpeg.h",
        "startline": 372,
        "endline": 372
      },
      {
        "docid": "turbojpeg.h",
        "startline": 165,
        "endline": 255
      },
      {
        "docid": "cdjpeg.h",
        "startline": 27,
        "endline": 38
      },
      {
        "docid": "rdbmp.c",
        "startline": 670,
        "endline": 687
      },
      {
        "docid": "rdppm.c",
        "startline": 750,
        "endline": 764
      }
    ],
    "function_summary": "This code segment is the initialization and file type detection portion of the tjLoadImage() function. It validates input parameters, initializes a TurboJPEG compressor instance, opens the image file, peeks at the first character to determine the file type (BMP or PPM/PGM), initializes the appropriate bitmap loader (jinit_read_bmp or jinit_read_ppm), starts the input processing, extracts image metadata (width, height, pixel format), calculates the aligned pitch, and allocates the destination buffer for the loaded image data."
  },
  {
    "instance_id": "Choser_CVE-2021-20205",
    "hits": [
      {
        "docid": "rdgif.c",
        "startline": 406,
        "endline": 449
      },
      {
        "docid": "rdgif.c",
        "startline": 85,
        "endline": 124
      },
      {
        "docid": "rdgif.c",
        "startline": 138,
        "endline": 148
      },
      {
        "docid": "rdgif.c",
        "startline": 60,
        "endline": 66
      },
      {
        "docid": "rdgif.c",
        "startline": 45,
        "endline": 46
      },
      {
        "docid": "rdgif.c",
        "startline": 343,
        "endline": 358
      },
      {
        "docid": "rdgif.c",
        "startline": 362,
        "endline": 373
      },
      {
        "docid": "rdgif.c",
        "startline": 167,
        "endline": 175
      },
      {
        "docid": "rdgif.c",
        "startline": 49,
        "endline": 54
      },
      {
        "docid": "rdgif.c",
        "startline": 41,
        "endline": 42
      },
      {
        "docid": "cdjpeg.h",
        "startline": 28,
        "endline": 39
      },
      {
        "docid": "cderror.h",
        "startline": 59,
        "endline": 74
      },
      {
        "docid": "jmorecfg.h",
        "startline": 99,
        "endline": 107
      },
      {
        "docid": "jmorecfg.h",
        "startline": 159,
        "endline": 161
      },
      {
        "docid": "jmorecfg.h",
        "startline": 206,
        "endline": 214
      },
      {
        "docid": "jpeglib.h",
        "startline": 290,
        "endline": 292
      }
    ],
    "function_summary": "This code segment (lines 406-449 in rdgif.c) reads and parses the Local Image Descriptor of a GIF file after locating the image separator character (',') in a scanning loop. It extracts the image dimensions (width and height), determines if the image is interlaced, checks for a local colormap, reads it if present, and retrieves the LZW minimum code size. The code validates these values and sets up the source structure accordingly. The loop continues scanning the file until it finds an image separator, handling GIF terminators (';'), extension blocks ('!'), and unexpected characters along the way."
  },
  {
    "instance_id": "Choser_CVE-2021-37972",
    "hits": [
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 46,
        "endline": 91
      },
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 1,
        "endline": 44
      },
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 118,
        "endline": 177
      },
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 260,
        "endline": 319
      },
      {
        "docid": "simd/x86_64/jchuff-sse2.asm",
        "startline": 382,
        "endline": 461
      },
      {
        "docid": "simd/nasm/jsimdext.inc",
        "startline": 209,
        "endline": 221
      },
      {
        "docid": "jchuff.c",
        "startline": 55,
        "endline": 66
      },
      {
        "docid": "jchuff.c",
        "startline": 102,
        "endline": 145
      },
      {
        "docid": "jchuff.c",
        "startline": 248,
        "endline": 335
      },
      {
        "docid": "jchuff.c",
        "startline": 364,
        "endline": 453
      },
      {
        "docid": "jchuff.c",
        "startline": 548,
        "endline": 562
      },
      {
        "docid": "jchuff.c",
        "startline": 564,
        "endline": 653
      },
      {
        "docid": "jchuff.h",
        "startline": 16,
        "endline": 34
      },
      {
        "docid": "jpeg_nbits_table.h",
        "startline": 1,
        "endline": 50
      },
      {
        "docid": "jpeglib.h",
        "startline": 46,
        "endline": 47
      },
      {
        "docid": "jpeglib.h",
        "startline": 73,
        "endline": 78
      },
      {
        "docid": "jpegint.h",
        "startline": 372,
        "endline": 372
      }
    ],
    "function_summary": "This code segment defines a lookup table (jpeg_nbits_table) used to determine the number of bits required to represent a given integer value. The table is constructed in reverse order (lines 53-68) followed by forward order (lines 69-85), creating a 65536-entry lookup table. It uses NASM assembly directives to generate repeated byte values: the first half maps high values (32768-65535) to their bit widths (15 down to 0), while the second half (jpeg_nbits_table label and onwards) maps low values (0-32767) to their bit widths (0 up to 15). This table implements the JPEG_NBITS macro used throughout the Huffman encoding process to quickly determine how many bits are needed to encode coefficient magnitudes without conditional branching."
  },
  {
    "instance_id": "zju-CVE-2021-4089",
    "hits": [
      {
        "docid": "app/Http/Controllers/AssetModelsController.php",
        "startline": 270,
        "endline": 285
      },
      {
        "docid": "app/Models/AssetModel.php",
        "startline": 1,
        "endline": 274
      },
      {
        "docid": "app/Helpers/Helper.php",
        "startline": 512,
        "endline": 517
      },
      {
        "docid": "app/Http/Requests/ImageUploadRequest.php",
        "startline": 1,
        "endline": 197
      }
    ],
    "function_summary": "This code segment checks if an AssetModel with the given ID exists. If the model is null (not found), it redirects to the models index route with an error message indicating the model does not exist."
  },
  {
    "instance_id": "zju-CVE-2022-0178",
    "hits": [
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 115,
        "endline": 117
      },
      {
        "docid": "routes/web.php",
        "startline": 246,
        "endline": 246
      },
      {
        "docid": "app/Http/Controllers/Controller.php",
        "startline": 34,
        "endline": 38
      }
    ],
    "function_summary": "This code returns a view that renders the API token management interface. It loads the 'account/api' Blade template, which displays a page where authenticated users can generate and manage personal API access tokens using Laravel Passport. The page includes a Vue.js component for token generation and shows API documentation information."
  },
  {
    "instance_id": "zju-CVE-2022-0579",
    "hits": [
      {
        "docid": "app/Http/Controllers/SuppliersController.php",
        "startline": 185,
        "endline": 194
      },
      {
        "docid": "app/Models/Supplier.php",
        "startline": 1,
        "endline": 192
      }
    ],
    "function_summary": "Lines 187-188 retrieve a Supplier record from the database by its ID. Line 187 uses the Supplier model's static find() method to query the suppliers table for a record matching the provided $supplierId parameter. Line 188 is a blank line serving as whitespace separation."
  },
  {
    "instance_id": "sjtu_CVE-2022-4583",
    "hits": [
      {
        "docid": "src/main/java/org/lemsml/jlems/io/util/JUtil.java",
        "startline": 200,
        "endline": 235
      },
      {
        "docid": "src/main/java/org/lemsml/jlems/core/logging/E.java",
        "startline": 1,
        "endline": 468
      }
    ],
    "function_summary": "This code segment is a method that extracts all contents of a JAR file to a specified output directory. It iterates through all JAR entries, creates directories for directory entries, and extracts file entries to the filesystem while skipping META-INF files. For each file entry, it reads the input stream from the JAR and writes it byte-by-byte to the output file."
  },
  {
    "instance_id": "sjtu_CVE-2019-3580",
    "hits": [
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 1096,
        "endline": 1105
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 395,
        "endline": 408
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 514,
        "endline": 522
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 606,
        "endline": 621
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 655,
        "endline": 662
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 702,
        "endline": 709
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 1077,
        "endline": 1084
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 456,
        "endline": 464
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 131,
        "endline": 131
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 232,
        "endline": 247
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 249,
        "endline": 273
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 1124,
        "endline": 1157
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 1107,
        "endline": 1117
      },
      {
        "docid": "extensions/wikidata/module/scripts/dialogs/schema-alignment-dialog.js",
        "startline": 322,
        "endline": 393
      },
      {
        "docid": "main/webapp/modules/core/scripts/util/misc.js",
        "startline": 34,
        "endline": 56
      },
      {
        "docid": "main/webapp/modules/core/scripts/project.js",
        "startline": 34,
        "endline": 34
      },
      {
        "docid": "main/webapp/modules/core/scripts/project.js",
        "startline": 324,
        "endline": 403
      },
      {
        "docid": "main/webapp/modules/core/scripts/project/browsing-engine.js",
        "startline": 157,
        "endline": 169
      }
    ],
    "function_summary": "This code segment (lines 1097-1104) is the `getJSON` function of the `SchemaAlignmentDialog` object. It collects all item documents from the schema alignment UI by iterating through DOM elements with the class `.wbs-item` within the `#schema-alignment-statements-container`, converts each item to JSON format using the `_itemToJSON` helper function, and returns a JSON object containing an array of these item documents and the Wikibase entity prefix URL."
  },
  {
    "instance_id": "sjtu_CVE-2018-12036",
    "hits": [
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java",
        "startline": 86,
        "endline": 122
      },
      {
        "docid": "utils/src/main/java/org/owasp/dependencycheck/utils/ExtractionException.java",
        "startline": 1,
        "endline": 68
      },
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/Engine.java",
        "startline": 1011,
        "endline": 1023
      },
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java",
        "startline": 53,
        "endline": 53
      },
      {
        "docid": "core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java",
        "startline": 20,
        "endline": 40
      }
    ],
    "function_summary": "This code segment is the main extraction logic of the `extractFiles` method that extracts files from a ZIP archive to a specified directory. It iterates through all entries in the ZIP file, creates directories for directory entries, and extracts file entries to disk. For each file entry, it optionally checks if the file should be extracted based on whether the Engine accepts the file type (when an Engine is provided). The method uses try-with-resources to automatically close the ZIP input stream and handles various I/O exceptions by logging them and throwing ExtractionException with descriptive messages."
  },
  {
    "instance_id": "sjtu_CVE-2022-36007",
    "hits": [
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java",
        "startline": 253,
        "endline": 270
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java",
        "startline": 210,
        "endline": 229
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java",
        "startline": 244,
        "endline": 251
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java",
        "startline": 280,
        "endline": 281
      },
      {
        "docid": "src/main/java/com/github/jlangch/venice/VncException.java",
        "startline": 41,
        "endline": 60
      }
    ],
    "function_summary": "This code segment is a security validation method that checks whether a file resides within a specified directory. It prevents directory traversal attacks by ensuring that the canonical path of the target file starts with the canonical path of the allowed directory. The method takes a directory and a file as parameters, constructs the file's path relative to the directory, and verifies that the resulting canonical path stays within the directory boundaries (preventing attacks like \"../../etc/passwd\"). It returns true only if the directory exists, the constructed file path points to an actual file, and the file's canonical path is within the directory's canonical path."
  },
  {
    "instance_id": "sjtu_CVE-2021-41189",
    "hits": [
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 918,
        "endline": 933
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/eperson/service/GroupService.java",
        "startline": 1,
        "endline": 330
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/authorize/service/AuthorizeService.java",
        "startline": 1,
        "endline": 595
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/core/Context.java",
        "startline": 1,
        "endline": 893
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/Collection.java",
        "startline": 1,
        "endline": 339
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/eperson/Group.java",
        "startline": 1,
        "endline": 245
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/core/Constants.java",
        "startline": 1,
        "endline": 274
      },
      {
        "docid": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java",
        "startline": 1,
        "endline": 1042
      }
    ],
    "function_summary": "This code segment creates a default read group for a collection with a specific naming convention. It instantiates a new Group using the GroupService, assigns it a name in the format \"COLLECTION_{collectionId}_{groupType}_DEFAULT_READ\", removes any existing policies for the specified action (defaultRead) from the collection, adds a new policy granting the defaultRead permission to the newly created group, updates the group, and finally returns the created group."
  },
  {
    "instance_id": "sjtu_CVE-2024-1483",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 421,
        "endline": 480
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 311,
        "endline": 413
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 274,
        "endline": 284
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 10,
        "endline": 10
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 18,
        "endline": 18
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 65,
        "endline": 66
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 14,
        "endline": 14
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 104,
        "endline": 104
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 106,
        "endline": 106
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 478,
        "endline": 484
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 106,
        "endline": 123
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 154,
        "endline": 157
      },
      {
        "docid": "mlflow/protos/service.proto",
        "startline": 658,
        "endline": 678
      },
      {
        "docid": "mlflow/protos/service.proto",
        "startline": 542,
        "endline": 548
      }
    ],
    "function_summary": "This code segment (lines 590-612 of mlflow/server/handlers.py) implements the HTTP request handler for creating a new MLflow experiment. It:\n\n1. Parses and validates the incoming HTTP request to extract experiment creation parameters (name, artifact_location, tags)\n2. Validates that 'name' and 'artifact_location' are strings, 'name' is required, and 'tags' is an array\n3. Converts the protobuf ExperimentTag objects from the request into mlflow.entities.ExperimentTag objects\n4. Validates the query string in the artifact_location URL to prevent path traversal attacks\n5. Calls the tracking store's create_experiment method with the validated parameters\n6. Constructs a protobuf response message containing the newly created experiment_id\n7. Serializes the response to JSON and returns it as an HTTP response"
  },
  {
    "instance_id": "Choser_CVE-2016-10504",
    "hits": [
      {
        "docid": "src/lib/openjp2/tcd.c",
        "startline": 1180,
        "endline": 1208
      },
      {
        "docid": "src/lib/openjp2/tcd.c",
        "startline": 1156,
        "endline": 1175
      },
      {
        "docid": "src/lib/openjp2/tcd.c",
        "startline": 1969,
        "endline": 2001
      },
      {
        "docid": "src/lib/openjp2/tcd.c",
        "startline": 1099,
        "endline": 1113
      },
      {
        "docid": "src/lib/openjp2/tcd.h",
        "startline": 89,
        "endline": 102
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 114,
        "endline": 133
      },
      {
        "docid": "src/lib/openjp2/opj_malloc.h",
        "startline": 50,
        "endline": 94
      }
    ],
    "function_summary": "Lines 1184-1188 calculate the required buffer size for an encoding code block's data. It computes the area of the code block by multiplying its width (x1 - x0) and height (y1 - y0), then multiplies by sizeof(OPJ_UINT32) to get the total memory size needed in bytes. This calculated value is stored in l_data_size and subsequently used to determine if memory allocation or reallocation is needed for the code block's data buffer."
  },
  {
    "instance_id": "Choser_CVE-2016-9118",
    "hits": [
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1733,
        "endline": 1759
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1485,
        "endline": 1657
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1709,
        "endline": 1891
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 633,
        "endline": 660
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 690,
        "endline": 709
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 353,
        "endline": 501
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 279,
        "endline": 287
      },
      {
        "docid": "src/bin/jp2/convert.h",
        "startline": 1,
        "endline": 126
      }
    ],
    "function_summary": "This code segment determines the number of image components (numcomps) based on the PNM file format type. It's a switch-case statement that maps PNM format identifiers (1-7) to their corresponding number of components: formats 1, 2, 4, and 5 (bitmap and greymap) map to 1 component (grayscale); formats 3 and 6 (pixmap) map to 3 components (RGB); format 7 (arbitrary map) uses the depth value from the header; any other format returns NULL indicating an error."
  },
  {
    "instance_id": "Choser_CVE-2017-14164",
    "hits": [
      {
        "docid": "src/lib/openjp2/j2k.c",
        "startline": 4202,
        "endline": 4254
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 71,
        "endline": 71
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 539,
        "endline": 585
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 345,
        "endline": 452
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 239,
        "endline": 308
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 493,
        "endline": 531
      },
      {
        "docid": "src/lib/openjp2/cio.h",
        "startline": 56,
        "endline": 70
      },
      {
        "docid": "src/lib/openjp2/cio.h",
        "startline": 176,
        "endline": 197
      },
      {
        "docid": "src/lib/openjp2/cio.c",
        "startline": 47,
        "endline": 69
      },
      {
        "docid": "src/lib/openjp2/cio.h",
        "startline": 81,
        "endline": 165
      },
      {
        "docid": "src/lib/openjp2/event.h",
        "startline": 50,
        "endline": 63
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 110,
        "endline": 128
      }
    ],
    "function_summary": "This code segment is part of the `opj_j2k_write_sot` function that writes a JPEG2000 Start of Tile-part (SOT) marker segment to a byte buffer. Specifically, lines 4217-4226 write the first 6 bytes of the SOT marker: the SOT marker code (0xff90, 2 bytes), the marker segment length Lsot (value 10, 2 bytes), and the tile index Isot (2 bytes). The function serializes these values in big-endian or little-endian byte order (depending on platform configuration) using the `opj_write_bytes` function, incrementing the data pointer after each write operation."
  },
  {
    "instance_id": "uuykea_CVE-2018-5786",
    "hits": [
      {
        "docid": "lrzip.c",
        "startline": 1093,
        "endline": 1134
      },
      {
        "docid": "lrzip.c",
        "startline": 923,
        "endline": 963
      },
      {
        "docid": "lrzip.c",
        "startline": 965,
        "endline": 979
      },
      {
        "docid": "lrzip.c",
        "startline": 981,
        "endline": 1092
      },
      {
        "docid": "lrzip.c",
        "startline": 1135,
        "endline": 1244
      },
      {
        "docid": "lrzip_private.h",
        "startline": 25,
        "endline": 25
      },
      {
        "docid": "lrzip_private.h",
        "startline": 96,
        "endline": 98
      },
      {
        "docid": "lrzip_private.h",
        "startline": 143,
        "endline": 144
      },
      {
        "docid": "lrzip_private.h",
        "startline": 151,
        "endline": 152
      },
      {
        "docid": "lrzip_private.h",
        "startline": 238,
        "endline": 243
      },
      {
        "docid": "lrzip_private.h",
        "startline": 393,
        "endline": 476
      },
      {
        "docid": "lrzip_private.h",
        "startline": 517,
        "endline": 574
      },
      {
        "docid": "util.h",
        "startline": 35,
        "endline": 85
      },
      {
        "docid": "md5.h",
        "startline": 32,
        "endline": 32
      }
    ],
    "function_summary": "This code segment (lines 1093-1134 in lrzip.c) iterates through each block in a stream of an lrzip compressed archive to display detailed file information. It performs the following operations for each block within a do-while loop:\n\n1. Validates archive integrity by checking that last_head positions are monotonically increasing and within file bounds\n2. Seeks to the next block header position in the input file using lseek()\n3. Reads block header information (compression type, compressed length, uncompressed length, and next header position) via get_header_info()\n4. Validates that header values are non-negative\n5. Prints verbose block information including block number and compression type (none, bzip2, lzo, lzma, gzip, or zpaq)\n6. Saves the first encountered compression type to save_ctype for summary reporting\n7. Accumulates total uncompressed bytes (utotal) and total compressed bytes (ctotal)\n8. Displays compression statistics including percentage and sizes using print_verbose() and print_maxverbose()\n9. Increments the block counter and continues until last_head equals zero (indicating end of stream)\n\nThe loop exits when last_head becomes 0, signaling that all blocks in the current stream have been processed."
  },
  {
    "instance_id": "uuykea_CVE-2019-20162",
    "hits": [
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 542,
        "endline": 600
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1828,
        "endline": 1843
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 791,
        "endline": 800
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 2091,
        "endline": 2104
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 1328,
        "endline": 1404
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 64,
        "endline": 88
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 50,
        "endline": 110
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 230,
        "endline": 272
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 520,
        "endline": 607
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 92,
        "endline": 254
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 39,
        "endline": 54
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 558,
        "endline": 671
      }
    ],
    "function_summary": "This code segment (lines 99-190) is responsible for parsing the header of an ISO base media file (MP4) box and determining how to construct the appropriate box object based on the parent container type and box type code. It handles special cases for boxes that require parent-context-specific initialization, including track references (TREF), item references (IREF), track groups (TRGR), and entity-to-group mappings (GRPL). For these special boxes, it creates a generic container box type (REFT, REFI, TRGT, or GRPT) and stores the actual box type code in a type-specific field. For all other boxes, it creates the box using the factory function gf_isom_box_new_ex. The code also handles UUID boxes by storing the UUID data and resolving the internal 4CC code."
  },
  {
    "instance_id": "Choser_CVE-2018-18088",
    "hits": [
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 2019,
        "endline": 2264
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 637,
        "endline": 664
      }
    ],
    "function_summary": "This code segment initializes a pointer (`red`) to the pixel data array of a specific image component and calculates an adjustment value (`adjustR`) for signed/unsigned data conversion. The `red` pointer points to the component's data buffer, while `adjustR` computes a midpoint offset (half the precision range) if the component uses signed representation, or 0 if unsigned. This adjustment is used to convert signed pixel values to their unsigned equivalents during PGM file output."
  },
  {
    "instance_id": "Choser_CVE-2018-6616",
    "hits": [
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 48,
        "endline": 81
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 534,
        "endline": 612
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 109,
        "endline": 136
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 353,
        "endline": 504
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 637,
        "endline": 688
      },
      {
        "docid": "src/bin/jp2/convert.h",
        "startline": 1,
        "endline": 125
      }
    ],
    "function_summary": "This code segment is the function body of `bmp_read_rle8_data`, which decodes RLE8 (Run-Length Encoded 8-bit) compressed BMP image data. It reads compressed data from a file stream and writes decompressed pixel data into a buffer. The function implements the BMP RLE8 decompression algorithm, handling four types of codes: encoded runs (repeat a color value), end-of-line markers (0x00), end-of-picture markers (0x01), delta/move commands (0x02), and absolute mode (literal pixel runs). It validates bounds during decompression and returns OPJ_TRUE on success or OPJ_FALSE on error (EOF or invalid data)."
  },
  {
    "instance_id": "Choser_CVE-2020-13790",
    "hits": [
      {
        "docid": "rdppm.c",
        "startline": 717,
        "endline": 732
      },
      {
        "docid": "rdppm.c",
        "startline": 70,
        "endline": 81
      },
      {
        "docid": "rdppm.c",
        "startline": 25,
        "endline": 26
      },
      {
        "docid": "rdppm.c",
        "startline": 44,
        "endline": 62
      },
      {
        "docid": "rdppm.c",
        "startline": 596,
        "endline": 596
      },
      {
        "docid": "jmorecfg.h",
        "startline": 44,
        "endline": 68
      },
      {
        "docid": "jmorecfg.h",
        "startline": 368,
        "endline": 394
      },
      {
        "docid": "jpeglib.h",
        "startline": 69,
        "endline": 71
      },
      {
        "docid": "jpeglib.h",
        "startline": 290,
        "endline": 292
      },
      {
        "docid": "jpeglib.h",
        "startline": 825,
        "endline": 871
      },
      {
        "docid": "cmyk.h",
        "startline": 1,
        "endline": 61
      },
      {
        "docid": "cdjpeg.h",
        "startline": 27,
        "endline": 38
      }
    ],
    "function_summary": "This code segment allocates and initializes a rescaling lookup table for converting PPM/PGM pixel values from arbitrary maxval ranges (0..maxval) to JPEG sample values (0..MAXJSAMPLE). The rescaling uses linear interpolation with rounding to map input values to the output range. The table is allocated from the JPEG memory manager's IMAGE pool and contains (maxval+1) entries, where each entry maps an input value to its proportionally scaled output value using the formula: output = (input \u00d7 MAXJSAMPLE + maxval/2) / maxval."
  },
  {
    "instance_id": "Choser_CVE-2020-24829",
    "hits": [
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 672,
        "endline": 1012
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 598,
        "endline": 618
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 625,
        "endline": 639
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 646,
        "endline": 656
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 662,
        "endline": 670
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 851,
        "endline": 863
      },
      {
        "docid": "include/gpac/media_tools.h",
        "startline": 548,
        "endline": 592
      },
      {
        "docid": "applications/mp4box/main.c",
        "startline": 4650,
        "endline": 4709
      }
    ],
    "function_summary": "This code segment creates and configures a DASH (Dynamic Adaptive Streaming over HTTP) segmenter object for generating MPEG-DASH content. The workflow is:\n\n1. **Dasher Creation**: Creates a GF_DASHSegmenter object using `gf_dasher_new()` with the MPD filename, DASH profile, temp directory, timescale, and context file.\n\n2. **Error Validation**: Checks if dasher creation failed (NULL pointer) and returns an error if so.\n\n3. **Configuration Chain**: Makes approximately 27 configuration API calls to set various DASH parameters, including:\n   - MPD metadata (title, copyright, more info URL, source info)\n   - MPD location URL\n   - Base URLs for content delivery\n   - URL template settings (enable/disable, template format, extensions)\n   - Segment timeline enable/disable\n   - Single segment and single file modes\n   - Bitstream switching mode\n   - Segment and fragment durations\n   - RAP (Random Access Point) splitting for segments and fragments\n   - Segment marker box\n   - Segment index (sidx) configuration\n   - Dynamic mode settings (mode type, update time, time shift depth, duration)\n   - Minimum buffer requirements\n   - AST (Availability Start Time) offset\n   - Memory fragmenting mode\n   - Initial ISOBMFF sequence numbers\n   - ISOBMFF default value storage (fragments defaults, PSSH mode, sample groups, traf settings)\n   - UTC reference insertion\n   - Real-time generation mode\n   - Content protection location mode\n   - Profile extension string\n   - Test mode (for debugging)\n   - Cached inputs mode\n   - Loop inputs mode\n   - Split on boundary/closest modes\n   - Cue file settings\n   - ISOBMFF box ordering options\n\n4. **Input Addition**: Iterates through the `dash_inputs` array and adds each media input to the dasher using `gf_dasher_add_input()`.\n\n5. **Error Handling**: Uses a chained pattern where each configuration call checks `if (!e)` before proceeding, ensuring errors propagate correctly.\n\nThe code prepares the DASH segmenter with all necessary configuration before the actual segmentation process begins."
  },
  {
    "instance_id": "Choser_CVE-2020-27814",
    "hits": [
      {
        "docid": "src/lib/openjp2/tcd.c",
        "startline": 1239,
        "endline": 1271
      },
      {
        "docid": "src/lib/openjp2/tcd.h",
        "startline": 77,
        "endline": 90
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 114,
        "endline": 133
      }
    ],
    "function_summary": "Lines 1245-1251 calculate the required buffer size for storing compressed encoding data of a code block. The calculation computes the size as: 2 bytes (extra padding for edge cases per issues #835 and #982) plus the area of the code block in pixels (width \u00d7 height) multiplied by the size of OPJ_UINT32 (4 bytes). This size estimate accounts for the theoretical upper bound of compressed code block data needed during JPEG2000 encoding."
  },
  {
    "instance_id": "Choser_CVE-2023-4756",
    "hits": [
      {
        "docid": "src/scene_manager/loader_bt.c",
        "startline": 50,
        "endline": 110
      },
      {
        "docid": "src/scene_manager/loader_bt.c",
        "startline": 135,
        "endline": 412
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 2018,
        "endline": 2086
      },
      {
        "docid": "include/gpac/utf.h",
        "startline": 63,
        "endline": 63
      }
    ],
    "function_summary": "This code segment implements a line buffer whitespace-skipping and comment-detection logic for a BT (BIFS Text) parser. It first skips over leading whitespace characters (spaces, tabs, newlines, carriage returns) in the current line buffer, then checks if the current position starts with a comment marker ('#' or '//'). If a comment is detected, the line size is truncated to the current position, effectively ignoring the rest of the line. Finally, if the line has been fully consumed or is empty, the function either marks parsing as done (for string-based input) or proceeds to read the next line from the gzip-compressed input file."
  },
  {
    "instance_id": "Choser_CVE-2024-0321",
    "hits": [
      {
        "docid": "src/filters/load_text.c",
        "startline": 307,
        "endline": 409
      },
      {
        "docid": "src/filters/load_text.c",
        "startline": 186,
        "endline": 234
      },
      {
        "docid": "include/gpac/utf.h",
        "startline": 53,
        "endline": 53
      },
      {
        "docid": "include/gpac/utf.h",
        "startline": 63,
        "endline": 74
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 2352,
        "endline": 2352
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "src/filters/load_text.c",
        "startline": 63,
        "endline": 146
      },
      {
        "docid": "src/filters/load_text.c",
        "startline": 177,
        "endline": 183
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 1,
        "endline": 100
      }
    ],
    "function_summary": "This code segment (lines 376-382) handles buffer overflow protection during UTF-8 encoding conversion. It checks if the intermediate conversion buffer `szLineConv` would overflow before continuing the conversion process. When the buffer is at capacity (checked via `GF_ARRAY_LENGTH(szLineConv)`), it logs a debug warning and truncates the buffer by setting the last valid position to `j = GF_ARRAY_LENGTH(szLineConv) - 1` and null-terminating at `szLineConv[j] = 0`. Finally, it copies the converted content from `szLineConv` back to `szLine` and returns the original file read status."
  },
  {
    "instance_id": "krrrlww_CVE-2024-28757",
    "hits": [
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7789,
        "endline": 7800
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 434,
        "endline": 440
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 433,
        "endline": 433
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 754,
        "endline": 754
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 745,
        "endline": 745
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 55,
        "endline": 55
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7981,
        "endline": 7993
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7803,
        "endline": 7819
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 7863,
        "endline": 7916
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 425,
        "endline": 430
      }
    ],
    "function_summary": "This function calculates the current amplification factor for XML parsing, which is used to detect billion laughs attacks (XML entity expansion attacks). It computes the ratio of total output bytes (direct + indirect) to direct input bytes. If no direct bytes have been processed yet, it returns 1.0 as the default amplification factor. The function asserts that it's being called on a root parser (not a child parser used for external entity parsing)."
  },
  {
    "instance_id": "krrrlww_CVE-2019-20208",
    "hits": [
      {
        "docid": "src/isomedia/box_code_base.c",
        "startline": 5409,
        "endline": 5486
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1194,
        "endline": 1229
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1137,
        "endline": 1142
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1132,
        "endline": 1136
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1123,
        "endline": 1129
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 590,
        "endline": 612
      },
      {
        "docid": "src/isomedia/box_funcs.c",
        "startline": 355,
        "endline": 373
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 542,
        "endline": 546
      },
      {
        "docid": "include/gpac/tools.h",
        "startline": 203,
        "endline": 249
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 57,
        "endline": 57
      }
    ],
    "function_summary": "Conditionally writes the sub_samples list (a list of subsample information boxes) to the bitstream if the sub_samples field of the sample table box (ptr) is not NULL. Returns an error if the write operation fails, otherwise continues execution."
  },
  {
    "instance_id": "Choser_CVE-2014-0160",
    "hits": [
      {
        "docid": "ssl/d1_both.c",
        "startline": 1462,
        "endline": 1499
      },
      {
        "docid": "ssl/ssl_locl.h",
        "startline": 249,
        "endline": 252
      },
      {
        "docid": "ssl/ssl3.h",
        "startline": 325,
        "endline": 325
      },
      {
        "docid": "ssl/ssl3.h",
        "startline": 343,
        "endline": 344
      },
      {
        "docid": "ssl/ssl3.h",
        "startline": 348,
        "endline": 358
      },
      {
        "docid": "ssl/d1_pkt.c",
        "startline": 1460,
        "endline": 1468
      },
      {
        "docid": "crypto/rand/rand.h",
        "startline": 103,
        "endline": 103
      },
      {
        "docid": "crypto/crypto.h",
        "startline": 368,
        "endline": 377
      }
    ],
    "function_summary": "This code segment processes a DTLS heartbeat request message. It reads the heartbeat type and payload length from the received data, invokes an optional message callback, and if the heartbeat type is TLS1_HB_REQUEST, it allocates a buffer to construct a heartbeat response. The response includes the message type (TLS1_HB_RESPONSE), the payload length, a copy of the received payload, and random padding bytes. It then sends this response using dtls1_write_bytes, invokes the message callback again if present, and frees the allocated buffer."
  },
  {
    "instance_id": "Choser_CVE-2017-9047",
    "hits": [
      {
        "docid": "valid.c",
        "startline": 1250,
        "endline": 1337
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 304,
        "endline": 314
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 274,
        "endline": 283
      },
      {
        "docid": "include/libxml/xmlstring.h",
        "startline": 85,
        "endline": 85
      }
    ],
    "function_summary": "This code segment handles the XML_ELEMENT_CONTENT_ELEMENT case in the xmlSnprintfElementContent function. It formats an element name (potentially namespace-prefixed) into a character buffer for DTD content model representation. The code:\n1. Checks if a namespace prefix exists and validates sufficient buffer space (at least xmlStrlen(prefix) + 10 bytes)\n2. If space is insufficient, appends \"...\" and returns early\n3. If space is sufficient, appends the prefix followed by a colon separator\n4. Then checks buffer space for the element name (at least xmlStrlen(name) + 10 bytes)\n\nThe +10 safety margin accounts for additional formatting characters (colon, occurrence indicators like ?, *, +, parentheses) that may be added later in the function."
  },
  {
    "instance_id": "Choser_CVE-2018-9251",
    "hits": [
      {
        "docid": "xzlib.c",
        "startline": 586,
        "endline": 590
      },
      {
        "docid": "xzlib.c",
        "startline": 51,
        "endline": 86
      },
      {
        "docid": "xzlib.c",
        "startline": 529,
        "endline": 631
      },
      {
        "docid": "xzlib.c",
        "startline": 88,
        "endline": 120
      }
    ],
    "function_summary": "This code segment handles error checking after LZMA decompression in the xz_decomp function. It checks for three specific error conditions returned by the lzma_code() function: LZMA_PROG_ERROR (programming/usage error), and continues the decompression loop while there is still output space available and the stream has not ended. The loop condition checks if there's space in the output buffer (strm->avail_out) and whether decompression has completed (ret != LZMA_STREAM_END)."
  },
  {
    "instance_id": "Choser_CVE-2020-23266",
    "hits": [
      {
        "docid": "include/gpac/tools.h",
        "startline": 249,
        "endline": 249
      },
      {
        "docid": "include/gpac/internal/isomedia_dev.h",
        "startline": 1743,
        "endline": 1778
      },
      {
        "docid": "src/isomedia/box_code_base.c",
        "startline": 5446,
        "endline": 5465
      }
    ],
    "function_summary": "Lines 5461-5462 in `src/isomedia/box_code_base.c` perform a validation check within the `stbl_Read` function that ensures the mandatory child boxes of a Sample Table Box (stbl) have been successfully parsed. Specifically, it checks if the `SampleToChunk`, `SampleSize`, `ChunkOffset`, and `TimeToSample` box pointers are non-NULL. If any of these required boxes is missing (NULL pointer), the function returns the error code `GF_ISOM_INVALID_FILE` to indicate the ISO media file structure is invalid. This validation is critical because these four boxes contain essential metadata for media sample location and timing - without them, the media samples in the track cannot be properly accessed or decoded."
  },
  {
    "instance_id": "Choser_CVE-2020-23267",
    "hits": [
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 358,
        "endline": 394
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 39,
        "endline": 69
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 72,
        "endline": 91
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 248,
        "endline": 394
      },
      {
        "docid": "include/gpac/isomedia.h",
        "startline": 534,
        "endline": 559
      },
      {
        "docid": "include/gpac/isomedia.h",
        "startline": 521,
        "endline": 532
      },
      {
        "docid": "include/gpac/rtp_streamer.h",
        "startline": 143,
        "endline": 143
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 550,
        "endline": 584
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 558,
        "endline": 562
      },
      {
        "docid": "src/media_tools/filestreamer.c",
        "startline": 561,
        "endline": 561
      }
    ],
    "function_summary": "This code segment extracts the NALU (Network Abstraction Layer Unit) size from an AVC/H.264 bitstream sample. It reads `avc_nalu_size` bytes in big-endian order to construct the NALU size value. The loop reads one byte at a time from the pointer `ptr`, shifts the accumulated size left by 8 bits (except for the last byte), and decrements the remaining byte count. This is necessary for parsing AVC samples where NALUs are length-prefixed according to the AVCDecoderConfigurationRecord settings."
  },
  {
    "instance_id": "Capsa_CVE-2022-26049",
    "hits": [
      {
        "docid": "src/main/java/com/diffplug/gradle/ZipMisc.java",
        "startline": 176,
        "endline": 191
      },
      {
        "docid": "src/main/java/com/diffplug/gradle/ZipMisc.java",
        "startline": 165,
        "endline": 168
      },
      {
        "docid": "src/main/java/com/diffplug/gradle/FileMisc.java",
        "startline": 95,
        "endline": 101
      }
    ],
    "function_summary": "This code segment is the `unzip` method that extracts a zip file to a destination directory. It iterates through all entries in the zip file using a ZipInputStream. For each entry, if it's a directory, it creates the directory structure; if it's a file, it creates the parent directories and then copies the file contents from the zip stream to the destination file using buffered streams."
  },
  {
    "instance_id": "Capsa_CVE-2022-23457",
    "hits": [
      {
        "docid": "src/main/java/org/owasp/esapi/reference/DefaultValidator.java",
        "startline": 447,
        "endline": 483
      },
      {
        "docid": "src/main/java/org/owasp/esapi/reference/DefaultValidator.java",
        "startline": 1182,
        "endline": 1184
      },
      {
        "docid": "src/main/java/org/owasp/esapi/reference/DefaultValidator.java",
        "startline": 88,
        "endline": 100
      },
      {
        "docid": "src/main/java/org/owasp/esapi/Validator.java",
        "startline": 252,
        "endline": 276
      },
      {
        "docid": "src/main/java/org/owasp/esapi/errors/ValidationException.java",
        "startline": 1,
        "endline": 115
      },
      {
        "docid": "src/main/java/org/owasp/esapi/Encoder.java",
        "startline": 174,
        "endline": 274
      },
      {
        "docid": "src/main/java/org/owasp/esapi/reference/DefaultEncoder.java",
        "startline": 104,
        "endline": 119
      },
      {
        "docid": "src/main/java/org/owasp/esapi/reference/DefaultEncoder.java",
        "startline": 124,
        "endline": 202
      },
      {
        "docid": "src/main/java/org/owasp/esapi/SecurityConfiguration.java",
        "startline": 121,
        "endline": 125
      },
      {
        "docid": "src/main/java/org/owasp/esapi/ESAPI.java",
        "startline": 96,
        "endline": 102
      },
      {
        "docid": "src/main/java/org/owasp/esapi/ESAPI.java",
        "startline": 175,
        "endline": 186
      }
    ],
    "function_summary": "This code segment is the `getValidDirectoryPath` method that validates directory paths in ESAPI. It ensures that a given input path represents a valid directory that exists within a specified parent directory. The method performs the following validation steps:\n1. Checks if input is empty/null and handles according to allowNull parameter\n2. Creates a File object from the input path\n3. Validates that the directory exists and is actually a directory (not a file)\n4. Validates that the parent parameter exists and is a directory\n5. Ensures the input directory is within the parent directory using canonical paths (prevents directory traversal attacks)\n6. Validates the canonical path against the \"DirectoryName\" validation rule using the fileValidator\n7. Ensures the canonical path matches the original input (prevents path manipulation)\n8. Returns the canonical path if all validations pass, otherwise throws ValidationException\n\nThis is a security-critical method designed to prevent directory traversal attacks and ensure path integrity."
  },
  {
    "instance_id": "Capsa_CVE-2022-21675",
    "hits": [
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
        "startline": 1,
        "endline": 13
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
        "startline": 36,
        "endline": 86
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/SmaliAssembler.java",
        "startline": 1,
        "endline": 15
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/SmaliAssembler.java",
        "startline": 80,
        "endline": 83
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/bootloader/Boot.java",
        "startline": 1,
        "endline": 30
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/bootloader/Boot.java",
        "startline": 310,
        "endline": 320
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/bootloader/Boot.java",
        "startline": 343,
        "endline": 353
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/bootloader/Boot.java",
        "startline": 447,
        "endline": 451
      },
      {
        "docid": "src/main/java/the/bytecode/club/bytecodeviewer/bootloader/Boot.java",
        "startline": 492,
        "endline": 496
      }
    ],
    "function_summary": "This code segment (lines 46-85) implements the core logic of extracting JAR/ZIP archives to a destination directory. It opens a JAR file, iterates through all entries, creates parent directories as needed, and extracts files to the destination path. Directory entries (ending with \"/\") are skipped, while file entries are extracted by reading from the JAR input stream and writing to file output streams byte-by-byte."
  },
  {
    "instance_id": "Capsa_CVE-2024-1594",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 421,
        "endline": 480
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 274,
        "endline": 283
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 504,
        "endline": 515
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 535,
        "endline": 551
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 311,
        "endline": 360
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 372,
        "endline": 413
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 18,
        "endline": 18
      },
      {
        "docid": "mlflow/protos/service.proto",
        "startline": 658,
        "endline": 677
      },
      {
        "docid": "mlflow/protos/service_pb2.py",
        "startline": 191,
        "endline": 204
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 106,
        "endline": 123
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 154,
        "endline": 157
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 478,
        "endline": 484
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 50
      },
      {
        "docid": "mlflow/store/tracking/file_store.py",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "mlflow/store/tracking/sqlalchemy_store.py",
        "startline": 1,
        "endline": 100
      }
    ],
    "function_summary": "This code segment (lines 589-612) is the `_create_experiment()` handler function for the MLflow tracking server's \"create experiment\" API endpoint. It processes HTTP requests to create a new experiment by:\n\n1. Parsing and validating the incoming request (name, artifact_location, tags)\n2. Converting protobuf ExperimentTag objects to ExperimentTag entity objects\n3. Validating the query string in the artifact_location URL to prevent path traversal attacks\n4. Calling the tracking store to create the experiment in the backend\n5. Building and returning a JSON response containing the newly created experiment ID\n\nThe function is decorated with `@catch_mlflow_exception` to handle exceptions and `@_disable_if_artifacts_only` to ensure it's disabled when the server is running in artifacts-only mode."
  },
  {
    "instance_id": "Capsa_CVE-2024-1593",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 410,
        "endline": 469
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 306,
        "endline": 358
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 361,
        "endline": 402
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 112,
        "endline": 114
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 269,
        "endline": 278
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 18,
        "endline": 18
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 493,
        "endline": 504
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 524,
        "endline": 540
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 106,
        "endline": 106
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 1,
        "endline": 11
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 456,
        "endline": 462
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 105,
        "endline": 122
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 153,
        "endline": 156
      },
      {
        "docid": "mlflow/protos/service_pb2.py",
        "startline": 188,
        "endline": 201
      },
      {
        "docid": "mlflow/store/tracking/abstract_store.py",
        "startline": 93,
        "endline": 104
      }
    ],
    "function_summary": "This code segment implements the `_create_experiment` HTTP handler function for the MLflow tracking server. It processes HTTP requests to create a new experiment, validating the request parameters (name, artifact_location, tags), sanitizing the artifact location query string for security, calling the tracking store to create the experiment, and returning a JSON response containing the newly created experiment ID."
  },
  {
    "instance_id": "zju-cve-2021-3728",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 262,
        "endline": 272
      },
      {
        "docid": "app/Http/Controllers/Budget/BudgetLimitController.php",
        "startline": 1,
        "endline": 223
      },
      {
        "docid": "app/Models/BudgetLimit.php",
        "startline": 1,
        "endline": 122
      },
      {
        "docid": "app/Models/Budget.php",
        "startline": 1,
        "endline": 177
      },
      {
        "docid": "app/Repositories/Budget/BudgetLimitRepositoryInterface.php",
        "startline": 1,
        "endline": 132
      },
      {
        "docid": "app/Repositories/Budget/BudgetLimitRepository.php",
        "startline": 1,
        "endline": 451
      },
      {
        "docid": "app/Models/TransactionCurrency.php",
        "startline": 1,
        "endline": 134
      },
      {
        "docid": "app/Support/Http/Controllers/DateCalculation.php",
        "startline": 1,
        "endline": 170
      },
      {
        "docid": "app/Repositories/Budget/OperationsRepositoryInterface.php",
        "startline": 1,
        "endline": 103
      },
      {
        "docid": "app/Repositories/Budget/BudgetRepositoryInterface.php",
        "startline": 1,
        "endline": 172
      },
      {
        "docid": "app/Repositories/Currency/CurrencyRepositoryInterface.php",
        "startline": 1,
        "endline": 245
      }
    ],
    "function_summary": "This code segment defines four HTTP routes for budget limit management in a Laravel application (Firefly III budget tracking system). The routes handle: (1) Creating a new budget limit with GET /budget-limits/create/{budget}/{start_date}/{end_date}, (2) Storing a new budget limit via POST /budget-limits/store, (3) Deleting an existing budget limit with GET /budget-limits/delete/{budgetLimit}, and (4) Updating an existing budget limit via POST /budget-limits/update/{budgetLimit}. All routes require user-full-auth middleware and are prefixed with 'budget-limits', using the BudgetLimitController in the Budget namespace with named route aliases."
  },
  {
    "instance_id": "zju-cve-2021-3729",
    "hits": [
      {
        "docid": "app/Http/Controllers/CurrencyController.php",
        "startline": 1,
        "endline": 431
      },
      {
        "docid": "app/Models/TransactionCurrency.php",
        "startline": 1,
        "endline": 134
      },
      {
        "docid": "app/Repositories/Currency/CurrencyRepositoryInterface.php",
        "startline": 1,
        "endline": 245
      },
      {
        "docid": "routes/web.php",
        "startline": 309,
        "endline": 324
      }
    ],
    "function_summary": "This code segment defines seven GET routes for currency management within a route group. The routes handle the following currency operations: listing all currencies (index), creating a new currency form, editing an existing currency, deleting a currency, setting a currency as default, enabling a currency, and disabling a currency. All routes are authenticated (require full user authentication), use the CurrencyController, have a 'currencies.' prefix in their route names, and use '/currencies' as the URL prefix."
  },
  {
    "instance_id": "zju-cve-2021-3730",
    "hits": [
      {
        "docid": "app/Http/Controllers/Budget/AvailableBudgetController.php",
        "startline": 140,
        "endline": 161
      },
      {
        "docid": "app/Http/Controllers/Budget/AvailableBudgetController.php",
        "startline": 232,
        "endline": 250
      },
      {
        "docid": "app/Models/AvailableBudget.php",
        "startline": 1,
        "endline": 125
      },
      {
        "docid": "app/Repositories/Budget/AvailableBudgetRepositoryInterface.php",
        "startline": 1,
        "endline": 157
      },
      {
        "docid": "app/Repositories/Budget/AvailableBudgetRepository.php",
        "startline": 54,
        "endline": 61
      },
      {
        "docid": "app/Repositories/Budget/AvailableBudgetRepository.php",
        "startline": 263,
        "endline": 271
      },
      {
        "docid": "routes/web.php",
        "startline": 239,
        "endline": 257
      }
    ],
    "function_summary": "This code defines five Laravel routes for the Available Budget Controller, which manages budget availability across different time periods and currencies. It includes:\n1. A route to edit an existing available budget (GET /available-budgets/edit/{availableBudget}/{start_date}/{end_date})\n2. A route to update an existing available budget (POST /available-budgets/update/{availableBudget}/{start_date}/{end_date})\n3. A route to delete an available budget (GET /available-budgets/delete/{availableBudget})\n\nThese routes allow authenticated users to modify and delete their available budget entries, where each available budget specifies the total amount available for a given currency within a specific date range."
  },
  {
    "instance_id": "zju-cve-2021-3819",
    "hits": [
      {
        "docid": "app/Http/Controllers/CurrencyController.php",
        "startline": 136,
        "endline": 264
      },
      {
        "docid": "app/Models/TransactionCurrency.php",
        "startline": 1,
        "endline": 135
      },
      {
        "docid": "app/Repositories/Currency/CurrencyRepositoryInterface.php",
        "startline": 1,
        "endline": 236
      },
      {
        "docid": "app/Repositories/User/UserRepositoryInterface.php",
        "startline": 1,
        "endline": 207
      },
      {
        "docid": "routes/web.php",
        "startline": 333,
        "endline": 348
      }
    ],
    "function_summary": "This code segment defines four GET routes for currency management in a Laravel web application. The routes handle: (1) deleting a currency (showing delete confirmation page), (2) setting a default currency via POST, (3) enabling a currency, and (4) disabling a currency. All routes are protected by 'user-full-auth' middleware, use the CurrencyController, are prefixed with '/currencies', and named with 'currencies.' prefix. Each route uses route model binding with the {currency} parameter that maps to TransactionCurrency model instances."
  },
  {
    "instance_id": "zju-cve-2021-3900",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 946,
        "endline": 961
      },
      {
        "docid": "app/Http/Controllers/RuleGroup/EditController.php",
        "startline": 1,
        "endline": 161
      },
      {
        "docid": "app/Http/Controllers/RuleGroup/CreateController.php",
        "startline": 1,
        "endline": 108
      },
      {
        "docid": "app/Http/Controllers/RuleGroup/DeleteController.php",
        "startline": 1,
        "endline": 103
      },
      {
        "docid": "app/Http/Controllers/RuleGroup/ExecutionController.php",
        "startline": 1,
        "endline": 118
      },
      {
        "docid": "app/Models/RuleGroup.php",
        "startline": 1,
        "endline": 134
      },
      {
        "docid": "app/Repositories/RuleGroup/RuleGroupRepositoryInterface.php",
        "startline": 1,
        "endline": 185
      },
      {
        "docid": "app/Http/Controllers/Controller.php",
        "startline": 1,
        "endline": 116
      },
      {
        "docid": "app/Support/Http/Controllers/UserNavigation.php",
        "startline": 1,
        "endline": 173
      },
      {
        "docid": "bootstrap/app.php",
        "startline": 69,
        "endline": 100
      }
    ],
    "function_summary": "This code segment defines five GET route definitions within a route group for rule group management. The routes handle: creating a new rule group (line 949), editing an existing rule group (line 950), deleting a rule group (line 951), moving a rule group up in order (line 952), moving a rule group down in order (line 953), and selecting transactions to apply a rule group to (line 954). All routes are namespaced under 'FireflyIII\\Http\\Controllers' with prefix 'rule-groups', middleware 'user-full-auth', and route names prefixed with 'rule-groups.'. The {ruleGroup} parameter uses Laravel's route model binding to automatically resolve RuleGroup model instances."
  },
  {
    "instance_id": "zju-cve-2021-3901",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 194,
        "endline": 210
      },
      {
        "docid": "app/Http/Controllers/Bill/IndexController.php",
        "startline": 1,
        "endline": 286
      },
      {
        "docid": "bootstrap/app.php",
        "startline": 69,
        "endline": 104
      }
    ],
    "function_summary": "This code segment defines a route group for the Bills Controller in a Laravel application. It creates GET and POST route endpoints for managing bills (recurring payment obligations). The routes handle listing bills, rescanning bills for transactions, creating new bills, editing existing bills, deleting bills, showing bill details, storing new bills, updating bills, destroying bills, and setting the display order of bills. All routes require user authentication with full privileges ('user-full-auth' middleware), use controllers in the 'FireflyIII\\Http\\Controllers' namespace with a '/bills' URL prefix, and route names prefixed with 'bills.'."
  },
  {
    "instance_id": "zju-cve-2021-4005",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 709,
        "endline": 733
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 151,
        "endline": 196
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 263,
        "endline": 281
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 288,
        "endline": 310
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 368,
        "endline": 389
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 485,
        "endline": 520
      },
      {
        "docid": "app/Http/Controllers/ProfileController.php",
        "startline": 529,
        "endline": 563
      },
      {
        "docid": "app/Http/Kernel.php",
        "startline": 148,
        "endline": 160
      }
    ],
    "function_summary": "Defines five 2FA-related routes for the user profile section: (1) POST route to enable 2FA that redirects to code generation, (2) GET route to display the 2FA setup page with QR code and backup codes, (3) POST route to verify and save the 2FA secret after user confirmation, (4) GET route to delete/disable 2FA, and (5) GET route to generate new backup recovery codes."
  },
  {
    "instance_id": "zju-cve-2021-4015",
    "hits": [
      {
        "docid": "routes/web.php",
        "startline": 1079,
        "endline": 1079
      },
      {
        "docid": "app/Http/Controllers/Transaction/LinkController.php",
        "startline": 121,
        "endline": 151
      },
      {
        "docid": "app/Http/Requests/JournalLinkRequest.php",
        "startline": 42,
        "endline": 53
      },
      {
        "docid": "app/Http/Requests/JournalLinkRequest.php",
        "startline": 60,
        "endline": 77
      },
      {
        "docid": "app/Repositories/LinkType/LinkTypeRepository.php",
        "startline": 246,
        "endline": 283
      },
      {
        "docid": "app/Repositories/LinkType/LinkTypeRepositoryInterface.php",
        "startline": 140,
        "endline": 148
      },
      {
        "docid": "app/Repositories/Journal/JournalRepositoryInterface.php",
        "startline": 54,
        "endline": 61
      },
      {
        "docid": "app/Models/TransactionJournal.php",
        "startline": 160,
        "endline": 174
      },
      {
        "docid": "routes/web.php",
        "startline": 1073,
        "endline": 1085
      }
    ],
    "function_summary": "This code segment defines a POST route that stores a link between two transaction journals. When a POST request is submitted to `/transactions/link/store/{tj}` (where `{tj}` is a transaction journal ID), it invokes the `store` method of the `LinkController` controller in the `FireflyIII\\Http\\Controllers\\Transaction` namespace. The route is named `transactions.link.store` and is protected by the `user-full-auth` middleware, ensuring only fully authenticated users can access it. The route parameter `{tj}` is bound to a `TransactionJournal` model instance via Laravel's implicit model binding."
  },
  {
    "instance_id": "zju-cve-2020-21564",
    "hits": [
      {
        "docid": "data/inc/files.php",
        "startline": 34,
        "endline": 62
      },
      {
        "docid": "data/inc/functions.all.php",
        "startline": 245,
        "endline": 259
      },
      {
        "docid": "data/inc/functions.all.php",
        "startline": 262,
        "endline": 293
      },
      {
        "docid": "data/inc/lang/en.php",
        "startline": 37,
        "endline": 37
      },
      {
        "docid": "data/inc/lang/en.php",
        "startline": 174,
        "endline": 182
      }
    ],
    "function_summary": "Lines 41-45 define an array of blocked file extensions and perform a security check to prevent uploading potentially dangerous executable files. The code creates a blacklist array of dangerous extensions (.php, .php3, .php4, .php5, .php6, .php7, .phtml, .phtm, .pht, .ph3, .ph4, .ph5, .asp, .cgi), then checks if the uploaded filename (converted to lowercase) ends with any of these extensions (checking last 4 or 5 characters) or contains '.htaccess'. If a dangerous extension is detected, the file is renamed by appending '.txt' to make it safe, then permissions are set to 0775. If the file is safe, permissions are set directly without renaming."
  },
  {
    "instance_id": "zju-cve-2021-36440",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 25,
        "endline": 76
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 1,
        "endline": 257
      },
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 141,
        "endline": 169
      },
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 202,
        "endline": 222
      },
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 4,
        "endline": 4
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 85,
        "endline": 116
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 119,
        "endline": 140
      }
    ],
    "function_summary": "This code segment is the beginning of the `download()` method that handles downloading update packages. Lines 25-30 specifically configure PHP execution settings and retrieve input parameters: it sets a 1000-second execution timeout, allocates 500MB of memory, and fetches two request parameters - `new_version` (the version number to download) and `file_url` (the download URL for the update package)."
  },
  {
    "instance_id": "zju-cve-2022-0409",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 68,
        "endline": 94
      },
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 1,
        "endline": 11
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 40,
        "endline": 67
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      },
      {
        "docid": "server/Application/Api/Model/AttachmentModel.class.php",
        "startline": 56,
        "endline": 130
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 70,
        "endline": 77
      },
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 97,
        "endline": 129
      }
    ],
    "function_summary": "Lines 75-80 handle a special case for uploaded images where the filename is 'blob' (typically from clipboard/paste operations). When the uploaded file name is 'blob', the code appends '.jpg' extension to it. Then it checks if the $_FILES['editormd-image-file'] array is empty and returns false if no file was uploaded."
  },
  {
    "instance_id": "zju-cve-2022-0950",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 112,
        "endline": 115
      },
      {
        "docid": "server/Application/Api/Model/AttachmentModel.class.php",
        "startline": 291,
        "endline": 320
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 120,
        "endline": 142
      },
      {
        "docid": "server/Application/Api/Conf/config.php",
        "startline": 10,
        "endline": 16
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 271,
        "endline": 404
      },
      {
        "docid": "server/Application/Api/Controller/AttachmentController.class.php",
        "startline": 94,
        "endline": 122
      },
      {
        "docid": "server/Application/Api/Model/AttachmentModel.class.php",
        "startline": 56,
        "endline": 127
      }
    ],
    "function_summary": "This code segment validates the uploaded file's filename for security purposes. It checks if the filename contains dangerous file extensions (like .php, .svg, .htm, etc.) that could pose security risks. If a dangerous filename is detected, it sends an error response with code 10100 and message \"\u4e0d\u652f\u6301\u6b64\u6587\u4ef6\u7c7b\u578b\" (This file type is not supported), then returns false to halt the upload process."
  },
  {
    "instance_id": "zju-cve-2022-1034",
    "hits": [
      {
        "docid": "server/Application/Api/Controller/AdminUpdateController.class.php",
        "startline": 26,
        "endline": 78
      },
      {
        "docid": "server/Application/Api/Controller/BaseController.class.php",
        "startline": 1,
        "endline": 288
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 257,
        "endline": 404
      }
    ],
    "function_summary": "This code segment configures PHP runtime settings and retrieves user input parameters for downloading a version update package. It sets execution time limit to 1000 seconds and memory limit to 500MB to handle potentially large file downloads. It then retrieves two POST/GET parameters: \"new_version\" (the new version string) and \"file_url\" (the download URL for the update package). Finally, it removes the \"v\" prefix from the version string to obtain the numeric version number."
  },
  {
    "instance_id": "zju-CVE-2021-32615",
    "hits": [
      {
        "docid": "admin/user_list_backend.php",
        "startline": 26,
        "endline": 36
      },
      {
        "docid": "admin/user_list_backend.php",
        "startline": 63,
        "endline": 76
      },
      {
        "docid": "include/config_default.inc.php",
        "startline": 520,
        "endline": 525
      },
      {
        "docid": "include/functions_plugins.inc.php",
        "startline": 185,
        "endline": 214
      },
      {
        "docid": "include/constants.php",
        "startline": 48,
        "endline": 48
      },
      {
        "docid": "include/constants.php",
        "startline": 64,
        "endline": 64
      },
      {
        "docid": "include/constants.php",
        "startline": 66,
        "endline": 66
      },
      {
        "docid": "include/constants.php",
        "startline": 68,
        "endline": 68
      }
    ],
    "function_summary": "This code segment constructs an SQL ORDER BY clause from DataTables request parameters. It checks if an order column is specified in the request, validates that the column is searchable, and builds an ORDER BY string with the column name and sort direction. If the resulting string is empty (only \"ORDER BY\" with no columns), it resets the order string to empty. The code handles a single ordering specification from the DataTables request."
  },
  {
    "instance_id": "zju-cve-2024-56408",
    "hits": [
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 75,
        "endline": 91
      },
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 16,
        "endline": 28
      },
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 3,
        "endline": 3
      },
      {
        "docid": "samples/Engineering/Convert-Online.php",
        "startline": 5,
        "endline": 5
      },
      {
        "docid": "src/PhpSpreadsheet/Calculation/Engineering/ConvertUOM.php",
        "startline": 530,
        "endline": 567
      },
      {
        "docid": "src/PhpSpreadsheet/Calculation/Engineering/ConvertUOM.php",
        "startline": 32,
        "endline": 199
      },
      {
        "docid": "src/PhpSpreadsheet/Calculation/Engineering/ConvertUOM.php",
        "startline": 472,
        "endline": 485
      },
      {
        "docid": "src/PhpSpreadsheet/Settings.php",
        "startline": 88,
        "endline": 91
      }
    ],
    "function_summary": "This code segment outputs a formatted conversion result message to the user. It displays the original quantity with its source unit name, the conversion result, and the destination unit name. If the validation fails (either source or destination unit is not found in the current category), it displays an error message requesting the user to enter a quantity and select valid units."
  },
  {
    "instance_id": "zju-cve-2025-0520",
    "hits": [
      {
        "docid": "server/Application/Home/Controller/PageController.class.php",
        "startline": 148,
        "endline": 153
      },
      {
        "docid": "server/Application/Home/Controller/PageController.class.php",
        "startline": 133,
        "endline": 163
      },
      {
        "docid": "server/Application/Common/Common/function.php",
        "startline": 9,
        "endline": 51
      },
      {
        "docid": "server/ThinkPHP/ThinkPHP.php",
        "startline": 88,
        "endline": 91
      },
      {
        "docid": "server/ThinkPHP/Common/functions.php",
        "startline": 252,
        "endline": 386
      },
      {
        "docid": "server/Application/Common/Conf/config.php",
        "startline": 31,
        "endline": 42
      },
      {
        "docid": "server/Application/Home/Controller/BaseController.class.php",
        "startline": 1,
        "endline": 123
      }
    ],
    "function_summary": "This code segment instantiates the ThinkPHP Upload class for local file upload, configures upload constraints (max file size of 3MB, allowed image extensions jpg/gif/png/jpeg), sets the upload root directory to './Public/Uploads/' with an empty save subdirectory, and then executes the file upload operation for uploaded files."
  },
  {
    "instance_id": "zju-cve-2023-41892",
    "hits": [
      {
        "docid": "src/controllers/AssetIndexesController.php",
        "startline": 38,
        "endline": 44
      },
      {
        "docid": "src/web/Controller.php",
        "startline": 124,
        "endline": 138
      },
      {
        "docid": "src/web/Controller.php",
        "startline": 425,
        "endline": 430
      },
      {
        "docid": "src/web/Controller.php",
        "startline": 474,
        "endline": 479
      },
      {
        "docid": "src/web/User.php",
        "startline": 268,
        "endline": 273
      },
      {
        "docid": "src/web/Request.php",
        "startline": 1297,
        "endline": 1300
      },
      {
        "docid": "src/Craft.php",
        "startline": 33,
        "endline": 55
      }
    ],
    "function_summary": "This code segment is a `beforeAction` hook that enforces access control for the AssetIndexesController. It requires the current user to have the 'utility:asset-indexes' permission and ensures the request accepts JSON responses. If these conditions are met, it calls the parent class's beforeAction method to continue the action execution chain."
  },
  {
    "instance_id": "zju-cve-2024-56145",
    "hits": [
      {
        "docid": "src/services/Entries.php",
        "startline": 919,
        "endline": 1037
      },
      {
        "docid": "src/services/Entries.php",
        "startline": 980,
        "endline": 990
      },
      {
        "docid": "src/elements/Entry.php",
        "startline": 1468,
        "endline": 1472
      },
      {
        "docid": "src/elements/Entry.php",
        "startline": 828,
        "endline": 828
      },
      {
        "docid": "src/elements/Entry.php",
        "startline": 835,
        "endline": 835
      },
      {
        "docid": "src/elements/db/EntryQuery.php",
        "startline": 1,
        "endline": 1273
      },
      {
        "docid": "src/models/Section.php",
        "startline": 1,
        "endline": 450
      },
      {
        "docid": "src/models/EntryType.php",
        "startline": 1,
        "endline": 430
      }
    ],
    "function_summary": "Lines 980-990 in src/services/Entries.php implement a fallback mechanism within the `_ensureSingleEntry()` method to recover entries that were soft-deleted when their entry type was removed. This code executes only if no valid entry was found in previous attempts (lines 962-973). It queries for trashed entries with the `deletedWithEntryType` flag set to true, indicating they were deleted alongside their entry type rather than explicitly by a user. If such an entry is found, the code assigns it the first available entry type ID from the section's current entry types, preparing it for potential restoration. This ensures Single sections can maintain their required single entry even when entry types have been modified or restored."
  },
  {
    "instance_id": "zju-cve-2017-9841",
    "hits": [
      {
        "docid": "src/Util/PHP/Default.php",
        "startline": 30,
        "endline": 68
      },
      {
        "docid": "src/Util/PHP.php",
        "startline": 65,
        "endline": 65
      },
      {
        "docid": "src/Util/PHP/Default.php",
        "startline": 78,
        "endline": 81
      }
    ],
    "function_summary": "This code segment reads PHP code from the standard input stream (php://input) and executes it using eval(). The '?>' prefix before file_get_contents() allows the input to be treated as PHP code. This is used as an entry point script that receives PHP code via stdin and evaluates it in a separate PHP process, specifically when running under phpdbg SAPI."
  },
  {
    "instance_id": "zju-cve-2023-34241",
    "hits": [
      {
        "docid": "scheduler/client.c",
        "startline": 222,
        "endline": 228
      },
      {
        "docid": "cups/http.h",
        "startline": 444,
        "endline": 453
      },
      {
        "docid": "cups/http.h",
        "startline": 522,
        "endline": 526
      },
      {
        "docid": "cups/http.h",
        "startline": 589,
        "endline": 589
      },
      {
        "docid": "scheduler/client.c",
        "startline": 186,
        "endline": 246
      },
      {
        "docid": "scheduler/client.c",
        "startline": 158,
        "endline": 158
      }
    ],
    "function_summary": "This code segment performs a reverse DNS validation check during double-lookup hostname verification. It iterates through a list of IP addresses obtained from resolving the client's hostname to verify that at least one resolved address matches the client's actual connection address. If no match is found, the `addr` pointer remains NULL, which triggers an error condition leading to connection closure."
  },
  {
    "instance_id": "zju-cve-2025-34086",
    "hits": [
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 383,
        "endline": 418
      },
      {
        "docid": "src/Controller/Base.php",
        "startline": 319,
        "endline": 322
      },
      {
        "docid": "src/Controller/Base.php",
        "startline": 157,
        "endline": 160
      },
      {
        "docid": "src/Controller/Base.php",
        "startline": 36,
        "endline": 67
      },
      {
        "docid": "src/Users.php",
        "startline": 336,
        "endline": 343
      },
      {
        "docid": "src/Controller/Base.php",
        "startline": 360,
        "endline": 374
      },
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 428,
        "endline": 439
      },
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 449,
        "endline": 455
      },
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 462,
        "endline": 473
      },
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 480,
        "endline": 483
      },
      {
        "docid": "src/Controller/Async/FilesystemManager.php",
        "startline": 490,
        "endline": 498
      }
    ],
    "function_summary": "This code segment validates that a directory exists before allowing it to be renamed. It calls `$this->filesystem()->getDir()` to retrieve a directory object using a namespace-prefixed path, then checks if the directory exists by testing the truthiness of the returned value. If the directory does not exist or the path points to a non-directory, it returns a JSON error response with HTTP status 400 (Bad Request) and an error message indicating that only directories can be renamed with this method."
  },
  {
    "instance_id": "zju-cve-2016-5734",
    "hits": [
      {
        "docid": "libraries/Menu.class.php",
        "startline": 167,
        "endline": 178
      },
      {
        "docid": "libraries/Menu.class.php",
        "startline": 17,
        "endline": 53
      },
      {
        "docid": "libraries/Menu.class.php",
        "startline": 165,
        "endline": 292
      },
      {
        "docid": "libraries/Table.class.php",
        "startline": 1,
        "endline": 82
      },
      {
        "docid": "libraries/Table.class.php",
        "startline": 163,
        "endline": 192
      },
      {
        "docid": "libraries/DatabaseInterface.class.php",
        "startline": 1,
        "endline": 62
      },
      {
        "docid": "libraries/DatabaseInterface.class.php",
        "startline": 107,
        "endline": 144
      },
      {
        "docid": "libraries/DatabaseInterface.class.php",
        "startline": 3199,
        "endline": 3202
      },
      {
        "docid": "libraries/Util.class.php",
        "startline": 1,
        "endline": 100
      },
      {
        "docid": "libraries/config.default.php",
        "startline": 116,
        "endline": 325
      }
    ],
    "function_summary": "This code segment builds the server information string that will be displayed in the breadcrumbs navigation bar. It retrieves the server's verbose name from configuration or defaults to the hostname, appends the port number if specified, constructs the HTML separator string, and builds an HTML anchor template for breadcrumb items that includes conditional display of label text based on the TabsMode configuration setting."
  },
  {
    "instance_id": "zju-cve-2018-1000019",
    "hits": [
      {
        "docid": "interface/billing/get_claim_file.php",
        "startline": 1,
        "endline": 6
      }
    ],
    "function_summary": "Lines 1-6 of interface/billing/get_claim_file.php contain a GPL license header comment that specifies the software licensing terms: stating the program is free software, can be redistributed and modified under the GNU General Public License version 2 or later."
  },
  {
    "instance_id": "zju-cve-2018-15153",
    "hits": [
      {
        "docid": "ccdaservice/ccda_gateway.php",
        "startline": 119,
        "endline": 146
      },
      {
        "docid": "interface/globals.php",
        "startline": 35,
        "endline": 38
      },
      {
        "docid": "interface/globals.php",
        "startline": 49,
        "endline": 52
      },
      {
        "docid": "interface/globals.php",
        "startline": 165,
        "endline": 165
      }
    ],
    "function_summary": "This code segment implements platform-specific logic to start a Node.js service that generates CCDA (Consolidated Clinical Document Architecture) documents. On Windows systems, it uses the 'node' command with 'start /B' to launch the service in the background via pclose(popen()). On non-Windows systems (Linux/Unix), it uses the 'nodejs' command with output redirection and background execution via exec(). The path to the Node.js service script (serveccda.js) is constructed using the $GLOBALS['fileroot'] variable concatenated with \"/ccdaservice\". The IS_WINDOWS constant determines which execution path is taken."
  },
  {
    "instance_id": "zju-CVE-2022-0179",
    "hits": [
      {
        "docid": "app/Http/Controllers/BulkAssetModelsController.php",
        "startline": 23,
        "endline": 23
      },
      {
        "docid": "app/Http/Controllers/BulkAssetModelsController.php",
        "startline": 28,
        "endline": 31
      },
      {
        "docid": "app/Http/Controllers/BulkAssetModelsController.php",
        "startline": 34,
        "endline": 41
      },
      {
        "docid": "app/Models/AssetModel.php",
        "startline": 98,
        "endline": 101
      }
    ],
    "function_summary": "This code segment counts how many asset models are eligible for deletion. It checks if the bulk action requested is 'delete', then iterates through the collection of asset models to count only those that have zero associated assets (assets_count == 0), storing this count in the $valid_count variable. Models with no associated assets are considered safe to delete."
  },
  {
    "instance_id": "zju-cve-2023-34448",
    "hits": [
      {
        "docid": "system/src/Grav/Common/Twig/Extension/GravExtension.php",
        "startline": 882,
        "endline": 916
      },
      {
        "docid": "system/src/Grav/Common/Language/Language.php",
        "startline": 482,
        "endline": 528
      },
      {
        "docid": "system/src/Grav/Common/Config/Config.php",
        "startline": 18,
        "endline": 86
      },
      {
        "docid": "system/src/Grav/Common/Twig/Extension/GravExtension.php",
        "startline": 73,
        "endline": 90
      },
      {
        "docid": "system/src/Grav/Common/Twig/Extension/GravExtension.php",
        "startline": 27,
        "endline": 50
      }
    ],
    "function_summary": "This code segment is part of the `translate()` method in GravExtension.php. Lines 908-911 handle translation functionality in Twig templates. Specifically:\n\nLine 909: Calls `$this->grav['language']->translate($args)` to translate the arguments using Grav's language service.\n\nLines 911-915: If the system's language debug mode is enabled (`system.languages.debug` is true), wraps the translated text in a `<span>` element with CSS class \"translate-debug\" and a tooltip showing the original translation key (`$args[0]`). Otherwise, returns the plain translation.\n\nThe code retrieves translated text from the Language service and optionally wraps it in debug markup when debugging is enabled."
  },
  {
    "instance_id": "zju-cve-2023-5341",
    "hits": [
      {
        "docid": "coders/bmp.c",
        "startline": 690,
        "endline": 699
      },
      {
        "docid": "coders/bmp.c",
        "startline": 127,
        "endline": 163
      },
      {
        "docid": "coders/bmp.c",
        "startline": 578,
        "endline": 643
      },
      {
        "docid": "coders/bmp.c",
        "startline": 683,
        "endline": 686
      },
      {
        "docid": "MagickCore/exception-private.h",
        "startline": 69,
        "endline": 79
      },
      {
        "docid": "MagickCore/locale_.h",
        "startline": 54,
        "endline": 58
      },
      {
        "docid": "MagickCore/image.h",
        "startline": 96,
        "endline": 102
      }
    ],
    "function_summary": "Lines 695-699 perform validation checks on the BMP header for \"CI\" (Color Icon) format images. The code validates that the header size (bmp_info.size) must be exactly 12, 40, or 64 bytes for CI format files. If the header size doesn't match these allowed values, it throws a CorruptImageError exception and terminates image reading, returning NULL to indicate failure."
  },
  {
    "instance_id": "zju-cve-2024-4041",
    "hits": [
      {
        "docid": "src/Controller/Frontend.php",
        "startline": 200,
        "endline": 261
      },
      {
        "docid": "src/Controller/Base.php",
        "startline": 439,
        "endline": 442
      },
      {
        "docid": "src/Storage/EntityManager.php",
        "startline": 504,
        "endline": 517
      },
      {
        "docid": "src/Controller/Frontend.php",
        "startline": 209,
        "endline": 228
      },
      {
        "docid": "src/Storage/EntityManager.php",
        "startline": 104,
        "endline": 109
      },
      {
        "docid": "src/Storage/Collection/Relations.php",
        "startline": 36,
        "endline": 70
      },
      {
        "docid": "src/Storage/Collection/Taxonomy.php",
        "startline": 36,
        "endline": 70
      },
      {
        "docid": "src/Storage/Entity/Content.php",
        "startline": 1,
        "endline": 467
      },
      {
        "docid": "src/Storage/Entity/Relations.php",
        "startline": 1,
        "endline": 132
      },
      {
        "docid": "src/Storage/Entity/Taxonomy.php",
        "startline": 1,
        "endline": 146
      },
      {
        "docid": "src/Storage/Mapping/ContentType.php",
        "startline": 1,
        "endline": 64
      }
    ],
    "function_summary": "Lines 205-208 retrieve the content type configuration and all form values from the POST request in the preview controller method. Specifically:\n- Line 206: Retrieves the content type configuration array/object for the given content type slug using the inherited getContentType() method\n- Line 207: Retrieves all POST request parameters (form data) submitted for content preview"
  },
  {
    "instance_id": "sjtu_cve-2023-6831",
    "hits": [
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 422,
        "endline": 446
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 419,
        "endline": 419
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 64,
        "endline": 65
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 1,
        "endline": 13
      },
      {
        "docid": "mlflow/utils/file_utils.py",
        "startline": 618,
        "endline": 630
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 64,
        "endline": 109
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 42,
        "endline": 42
      }
    ],
    "function_summary": "This code segment is a security validation function that checks whether a file path is safe to use in file operations. It prevents path traversal attacks by validating that the path: (1) does not contain hash symbols ('#' or '%23'), (2) does not contain OS-specific path separators other than forward slash '/', (3) does not contain '..' components that could navigate to parent directories, (4) is not an absolute path (on either POSIX or Windows systems), and (5) does not contain Windows drive letters (e.g., 'C:'). If any validation fails, it raises an MlflowException with INVALID_PARAMETER_VALUE error code."
  },
  {
    "instance_id": "sjtu_cve-2024-0520",
    "hits": [
      {
        "docid": "mlflow/utils/request_utils.py",
        "startline": 49,
        "endline": 60
      },
      {
        "docid": "mlflow/utils/request_utils.py",
        "startline": 193,
        "endline": 231
      },
      {
        "docid": "mlflow/utils/rest_utils.py",
        "startline": 16,
        "endline": 21
      },
      {
        "docid": "mlflow/utils/file_utils.py",
        "startline": 851,
        "endline": 856
      },
      {
        "docid": "mlflow/data/dataset_source.py",
        "startline": 8,
        "endline": 34
      },
      {
        "docid": "mlflow/exceptions.py",
        "startline": 64,
        "endline": 109
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 42,
        "endline": 42
      }
    ],
    "function_summary": "The code segment (lines 37-74) defines the `load` method of the `HTTPDatasetSource` class. This method downloads a dataset from an HTTP/HTTPS URL to the local filesystem. It performs the following operations:\n\n1. Makes an HTTP GET request to the dataset URL using streaming mode\n2. Validates the response status\n3. Determines the filename for the downloaded file by:\n   - First checking the `Content-Disposition` header for a filename\n   - If not found, extracting the basename from the URL path\n   - Falling back to \"dataset_source\" if neither is available\n4. Creates a temporary directory if no destination path is provided\n5. Constructs the full destination path by joining the destination directory with the filename\n6. Downloads the response content in 1 MB chunks and writes them to the local file\n7. Returns the local filesystem path to the downloaded file"
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-9988",
    "hits": [
      {
        "docid": "util/parser.c",
        "startline": 3077,
        "endline": 3084
      },
      {
        "docid": "util/swftypes.h",
        "startline": 1808,
        "endline": 1812
      },
      {
        "docid": "util/swftypes.h",
        "startline": 29,
        "endline": 29
      },
      {
        "docid": "util/read.h",
        "startline": 21,
        "endline": 21
      },
      {
        "docid": "util/read.c",
        "startline": 330,
        "endline": 348
      }
    ],
    "function_summary": "This code segment parses an ABC (ActionScript Byte Code) namespace set structure from a SWF file. It reads the count of namespaces in the set, allocates memory for an array to hold namespace indices, and then iterates through each element to read the encoded namespace index values from the file stream."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-7868",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 306,
        "endline": 369
      },
      {
        "docid": "util/decompile.c",
        "startline": 288,
        "endline": 301
      },
      {
        "docid": "util/decompile.c",
        "startline": 48,
        "endline": 49
      },
      {
        "docid": "util/decompile.c",
        "startline": 234,
        "endline": 271
      },
      {
        "docid": "util/decompile.c",
        "startline": 372,
        "endline": 420
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      }
    ],
    "function_summary": "The code segment is the `getString()` function, which converts a SWF_ACTIONPUSHPARAM structure into a string representation. It examines the Type field of the parameter and returns the appropriate string representation for different ActionScript value types (strings, numbers, registers, booleans, null, undefined, constants from the constant pool, and variables). The function allocates memory for string results and handles special escaping for constant pool strings using helper functions."
  },
  {
    "instance_id": "GioldDiorld_CVE-2017-7578",
    "hits": [
      {
        "docid": "util/parser.c",
        "startline": 434,
        "endline": 449
      },
      {
        "docid": "util/swftypes.h",
        "startline": 565,
        "endline": 571
      },
      {
        "docid": "util/swftypes.h",
        "startline": 553,
        "endline": 556
      },
      {
        "docid": "util/parser.c",
        "startline": 424,
        "endline": 431
      },
      {
        "docid": "util/read.h",
        "startline": 1,
        "endline": 39
      },
      {
        "docid": "util/parser.c",
        "startline": 56,
        "endline": 63
      },
      {
        "docid": "util/parser.c",
        "startline": 66,
        "endline": 72
      },
      {
        "docid": "util/parser.h",
        "startline": 38,
        "endline": 48
      },
      {
        "docid": "util/parser.c",
        "startline": 34,
        "endline": 34
      }
    ],
    "function_summary": "This code segment parses a SWF_FOCALGRADIENT structure from a binary file stream. It reads three bitfields (SpreadMode, InterpolationMode, NumGradients) totaling 8 bits, validates that NumGradients doesn't exceed 15, iterates to parse NumGradients gradient records, and finally reads a 16-bit FocalPoint value."
  },
  {
    "instance_id": "GioldDiorld_CVE-2018-11095",
    "hits": [
      {
        "docid": "util/decompile.c",
        "startline": 859,
        "endline": 869
      },
      {
        "docid": "util/swftypes.h",
        "startline": 50,
        "endline": 54
      },
      {
        "docid": "util/swftypes.h",
        "startline": 121,
        "endline": 136
      },
      {
        "docid": "util/swftypes.h",
        "startline": 460,
        "endline": 532
      },
      {
        "docid": "src/actiontypes.h",
        "startline": 25,
        "endline": 141
      },
      {
        "docid": "util/decompile.c",
        "startline": 49,
        "endline": 49
      },
      {
        "docid": "util/decompile.c",
        "startline": 872,
        "endline": 884
      },
      {
        "docid": "util/decompile.c",
        "startline": 1001,
        "endline": 1188
      },
      {
        "docid": "util/decompile.c",
        "startline": 1191,
        "endline": 1216
      },
      {
        "docid": "util/decompile.c",
        "startline": 1299,
        "endline": 1313
      },
      {
        "docid": "util/decompile.c",
        "startline": 1417,
        "endline": 1428
      },
      {
        "docid": "util/decompile.c",
        "startline": 1431,
        "endline": 1539
      },
      {
        "docid": "util/action.h",
        "startline": 24,
        "endline": 30
      },
      {
        "docid": "src/blocks/error.h",
        "startline": 1,
        "endline": 50
      }
    ],
    "function_summary": "This code segment defines the `OpCode` helper function that safely retrieves the ActionCode of a SWF_ACTION at a given index position in an actions array. It performs bounds checking to prevent out-of-bounds access: if the index `n` is 0, less than 0, or exceeds the maximum array size `maxn`, it returns -999 as an error sentinel value. Otherwise, it returns the ActionCode field from the SWF_ACTIONRECORD union member of the action at the specified index."
  },
  {
    "instance_id": "Choser_CVE-2018-14498",
    "hits": [
      {
        "docid": "rdbmp.c",
        "startline": 152,
        "endline": 218
      },
      {
        "docid": "rdbmp.c",
        "startline": 29,
        "endline": 30
      },
      {
        "docid": "rdbmp.c",
        "startline": 35,
        "endline": 56
      },
      {
        "docid": "rdbmp.c",
        "startline": 59,
        "endline": 86
      },
      {
        "docid": "cmyk.h",
        "startline": 23,
        "endline": 45
      },
      {
        "docid": "cdjpeg.h",
        "startline": 23,
        "endline": 38
      },
      {
        "docid": "jpeglib.h",
        "startline": 69,
        "endline": 71
      },
      {
        "docid": "jpeglib.h",
        "startline": 217,
        "endline": 242
      },
      {
        "docid": "jpeglib.h",
        "startline": 290,
        "endline": 292
      },
      {
        "docid": "jpeglib.h",
        "startline": 297,
        "endline": 467
      },
      {
        "docid": "jmorecfg.h",
        "startline": 38,
        "endline": 68
      },
      {
        "docid": "jmorecfg.h",
        "startline": 185,
        "endline": 196
      },
      {
        "docid": "jmorecfg.h",
        "startline": 199,
        "endline": 232
      },
      {
        "docid": "jmorecfg.h",
        "startline": 336,
        "endline": 394
      }
    ],
    "function_summary": "This code segment is the \"else\" branch of the `get_8bit_row` function that handles expanding 8-bit colormap indexes to RGB(A) pixel data. It processes images with extended RGB color spaces (JCS_EXT_RGB, JCS_EXT_RGBX, JCS_EXT_BGR, JCS_EXT_BGRX, JCS_EXT_XBGR, JCS_EXT_XRGB, JCS_EXT_RGBA, JCS_EXT_BGRA, JCS_EXT_ABGR, JCS_EXT_ARGB) by looking up component positions (red, green, blue, and optionally alpha) using global arrays indexed by the color space enum. It reads each colormap index from the input buffer, looks up RGB values from the colormap arrays, writes them to the correct positions in the output buffer based on the color space layout, and optionally sets an alpha channel to 0xFF for formats with alpha channels."
  },
  {
    "instance_id": "Choser_CVE-2019-2201",
    "hits": [
      {
        "docid": "tjbench.c",
        "startline": 78,
        "endline": 79
      },
      {
        "docid": "tjbench.c",
        "startline": 139,
        "endline": 154
      },
      {
        "docid": "tjbench.c",
        "startline": 174,
        "endline": 196
      },
      {
        "docid": "tjbench.c",
        "startline": 149,
        "endline": 154
      },
      {
        "docid": "tjbench.c",
        "startline": 176,
        "endline": 186
      },
      {
        "docid": "tjbench.c",
        "startline": 47,
        "endline": 76
      },
      {
        "docid": "tjbench.c",
        "startline": 41,
        "endline": 45
      },
      {
        "docid": "turbojpeg.h",
        "startline": 933,
        "endline": 934
      },
      {
        "docid": "turbojpeg.h",
        "startline": 302,
        "endline": 304
      },
      {
        "docid": "turbojpeg.h",
        "startline": 143,
        "endline": 154
      },
      {
        "docid": "turbojpeg.h",
        "startline": 664,
        "endline": 666
      },
      {
        "docid": "turbojpeg.h",
        "startline": 81,
        "endline": 132
      },
      {
        "docid": "tjutil.h",
        "startline": 39,
        "endline": 41
      },
      {
        "docid": "tjutil.h",
        "startline": 47,
        "endline": 47
      },
      {
        "docid": "tjutil.c",
        "startline": 44,
        "endline": 54
      },
      {
        "docid": "tjutil.c",
        "startline": 62,
        "endline": 68
      }
    ],
    "function_summary": "This code segment allocates and initializes a YUV buffer for intermediate storage during JPEG decompression benchmarking when YUV mode is enabled. It first determines the buffer dimensions (using tile dimensions if tiling is enabled, otherwise scaled image dimensions), calculates the required YUV buffer size via tjBufSizeYUV2(), validates the size, allocates memory for the YUV buffer, and initializes it with gray value (127). This YUV buffer is subsequently used in the benchmark loop to decompress JPEG data to YUV format first, then decode from YUV to RGB. It then initializes the benchmark iteration counter and timing variables (setting iter to -1 for warmup phase, and elapsed/elapsedDecode to 0.0), and starts the main benchmark loop structure with nested tile iteration setup."
  },
  {
    "instance_id": "zju-CVE-2022-1511",
    "hits": [
      {
        "docid": "app/Http/Controllers/Assets/AssetsController.php",
        "startline": 862,
        "endline": 873
      },
      {
        "docid": "app/Models/CheckoutRequest.php",
        "startline": 1,
        "endline": 51
      },
      {
        "docid": "app/Models/Asset.php",
        "startline": 1,
        "endline": 51
      },
      {
        "docid": "app/Models/User.php",
        "startline": 1,
        "endline": 51
      },
      {
        "docid": "app/Models/User.php",
        "startline": 439,
        "endline": 442
      }
    ],
    "function_summary": "This code retrieves a collection of CheckoutRequest records with eager-loaded user and requestedItem relationships, filters out canceled requests (whereNull('canceled_at')), and applies an optional filter by user_id if provided. The with('user', 'requestedItem') clause is duplicated unnecessarily. If a user_id is provided, the query filters by that user but incorrectly uses get() instead of continuing the query chain. Finally, it orders the results by created_at in descending order and retrieves all matching records."
  },
  {
    "instance_id": "sjtu_CVE-2018-1000850",
    "hits": [
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 89,
        "endline": 95
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 97,
        "endline": 144
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 31,
        "endline": 33
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 35,
        "endline": 47
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 49,
        "endline": 71
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 146,
        "endline": 164
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/ParameterHandler.java",
        "startline": 83,
        "endline": 101
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestFactory.java",
        "startline": 92,
        "endline": 114
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestFactory.java",
        "startline": 102,
        "endline": 103
      },
      {
        "docid": "retrofit/src/main/java/retrofit2/RequestBuilder.java",
        "startline": 73,
        "endline": 75
      }
    ],
    "function_summary": "This code segment validates that the relativeUrl is not null before performing a path parameter substitution. If relativeUrl is null (which occurs when query parameters have been added), it throws an AssertionError. Otherwise, it replaces the path parameter placeholder (in the format \"{name}\") with the canonicalized value."
  },
  {
    "instance_id": "sjtu_CVE-2016-9177",
    "hits": [
      {
        "docid": "src/main/java/spark/resource/ExternalResourceHandler.java",
        "startline": 60,
        "endline": 87
      },
      {
        "docid": "src/main/java/spark/resource/AbstractResourceHandler.java",
        "startline": 80,
        "endline": 122
      },
      {
        "docid": "src/main/java/spark/resource/UriPath.java",
        "startline": 32,
        "endline": 165
      },
      {
        "docid": "src/main/java/spark/resource/ExternalResource.java",
        "startline": 30,
        "endline": 103
      },
      {
        "docid": "src/main/java/spark/staticfiles/DirectoryTraversal.java",
        "startline": 1,
        "endline": 30
      },
      {
        "docid": "src/main/java/spark/staticfiles/StaticFilesFolder.java",
        "startline": 1,
        "endline": 32
      },
      {
        "docid": "src/main/java/spark/resource/AbstractFileResolvingResource.java",
        "startline": 37,
        "endline": 119
      },
      {
        "docid": "src/main/java/spark/utils/StringUtils.java",
        "startline": 218,
        "endline": 267
      },
      {
        "docid": "src/main/java/spark/utils/StringUtils.java",
        "startline": 393,
        "endline": 406
      },
      {
        "docid": "src/main/java/spark/resource/ExternalResourceHandler.java",
        "startline": 35,
        "endline": 36
      },
      {
        "docid": "src/main/java/spark/resource/ExternalResourceHandler.java",
        "startline": 53,
        "endline": 57
      }
    ],
    "function_summary": "This code segment is responsible for resolving and locating external file resources based on a requested URI path. It canonicalizes the path, combines it with the base resource directory, creates an ExternalResource object, handles directory cases by optionally serving a welcome file, validates the resource exists, and performs directory traversal security checks before returning the resource."
  },
  {
    "instance_id": "Choser_CVE-2016-7445",
    "hits": [
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1322,
        "endline": 1327
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1329,
        "endline": 1338
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1340,
        "endline": 1358
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1360,
        "endline": 1376
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 1378,
        "endline": 1542
      },
      {
        "docid": "src/bin/jp2/convert.c",
        "startline": 40,
        "endline": 46
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 279,
        "endline": 287
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 380,
        "endline": 407
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 104,
        "endline": 252
      }
    ],
    "function_summary": "This code segment (lines 1330-1539) is the `skip_white` helper function and the main `read_pnm_header` function for parsing PNM (Portable Any Map) image file headers. The `skip_white` function skips whitespace characters while checking for newlines. The `read_pnm_header` function parses PNM format headers (P1-P7) by reading the magic number, extracting image dimensions (width, height), bit depth (maxval), and for P7 (PAM) format, parsing additional fields like DEPTH, TUPLTYPE (image type: BLACKANDWHITE, GRAYSCALE, GRAYSCALE_ALPHA, RGB, RGB_ALPHA), and ENDHDR marker. It uses helper functions `skip_white`, `skip_int`, and `skip_idf` to parse the header line-by-line, setting the `ok` flag in the `pnm_header` structure to indicate successful parsing."
  },
  {
    "instance_id": "Choser_CVE-2018-5727",
    "hits": [
      {
        "docid": "src/lib/openjp2/t1.c",
        "startline": 2105,
        "endline": 2260
      },
      {
        "docid": "src/lib/openjp2/t1.h",
        "startline": 53,
        "endline": 68
      },
      {
        "docid": "src/lib/openjp2/opj_intmath.h",
        "startline": 255,
        "endline": 267
      },
      {
        "docid": "src/lib/openjp2/tcd.h",
        "startline": 157,
        "endline": 168
      },
      {
        "docid": "src/lib/openjp2/tcd.h",
        "startline": 189,
        "endline": 222
      },
      {
        "docid": "src/lib/openjp2/j2k.h",
        "startline": 175,
        "endline": 203
      }
    ],
    "function_summary": "This code segment performs quantization scaling on tile component data in the JPEG 2000 encoding process. It applies different scaling factors based on the quantization mode (qmfbid): \n- When qmfbid == 1 (reversible 5-3 wavelet transform), it scales each coefficient by left-shifting by T1_NMSEDEC_FRACBITS\n- When qmfbid == 0 (irreversible 9-7 wavelet transform), it multiplies each coefficient by a precomputed band-specific constant (bandconst) using fixed-point multiplication\nThe scaling prepares the coefficients for subsequent tier-1 encoding of the code block."
  },
  {
    "instance_id": "Choser_CVE-2018-5785",
    "hits": [
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 56,
        "endline": 81
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 357,
        "endline": 504
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 110,
        "endline": 128
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 637,
        "endline": 664
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 669,
        "endline": 688
      },
      {
        "docid": "src/lib/openjp2/openjpeg.h",
        "startline": 353,
        "endline": 504
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 177,
        "endline": 237
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 239,
        "endline": 297
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 156,
        "endline": 175
      },
      {
        "docid": "src/bin/jp2/convertbmp.c",
        "startline": 661,
        "endline": 857
      }
    ],
    "function_summary": "This code segment reads the color channel bit masks (biGreenMask, biBlueMask, and biAlphaMask) from a BMP file header for BITMAPV3INFOHEADER format (biSize >= 56). It reads each 32-bit unsigned integer mask value in little-endian byte order from the input file stream using four sequential getc() calls per mask, performing bitwise OR operations with left shifts (0, 8, 16, 24 bits) to reconstruct the 32-bit values from individual bytes."
  },
  {
    "instance_id": "Choser_CVE-2021-29279",
    "hits": [
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 30,
        "endline": 76
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 113,
        "endline": 148
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 150,
        "endline": 182
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 252,
        "endline": 262
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 265,
        "endline": 306
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 308,
        "endline": 315
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 317,
        "endline": 378
      },
      {
        "docid": "src/filters/reframe_flac.c",
        "startline": 380,
        "endline": 605
      },
      {
        "docid": "include/gpac/filters.h",
        "startline": 110,
        "endline": 114
      },
      {
        "docid": "include/gpac/filters.h",
        "startline": 1,
        "endline": 2000
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 496,
        "endline": 496
      },
      {
        "docid": "include/gpac/constants.h",
        "startline": 54,
        "endline": 107
      },
      {
        "docid": "include/gpac/bitstream.h",
        "startline": 1,
        "endline": 500
      }
    ],
    "function_summary": "Lines 390-545 of src/filters/reframe_flac.c contain the core packet processing loop of the `flac_dmx_process()` function, which is the main entry point for the FLAC reframer filter. This code segment performs the following operations:\n\n1. **Duration and State Validation** (lines 392-396): Checks and updates file duration metadata, then validates that the output PID is configured and the filter is in playing state.\n\n2. **Input Packet Retrieval and EOS Handling** (lines 398-412): Retrieves the next input packet from the input PID. If no packet is available, checks for End-of-Stream (EOS) condition. If EOS is reached and the buffer is empty, propagates EOS to the output PID and returns GF_EOS. Otherwise, sets a flag for final flushing.\n\n3. **Buffer Management** (lines 414-436): \n   - Saves the current buffer size for later CTS update logic\n   - If not resuming from a previous position, retrieves packet data and size\n   - Tracks byte offsets for seek operations, handling discontinuities\n   - Reallocates the internal FLAC buffer (`ctx->flac_buffer`) if needed to accommodate new packet data\n   - Appends packet data to the buffer\n\n4. **CTS (Composition Timestamp) Handling** (lines 439-446): If the input PID provides timestamps, retrieves the CTS from the current packet. If CTS is invalid, resets the previous packet size to avoid incorrect timestamp updates.\n\n5. **Buffer Parsing Setup** (lines 448-455): Initializes pointers and counters for buffer parsing. If resuming from a previous position (due to insufficient output buffer space), adjusts the start pointer and remaining size accordingly.\n\n6. **FLAC Stream Initialization** (lines 490-534): If the filter is not yet initialized (first packet or after reset):\n   - Searches for the FLAC magic signature \"fLaC\" (0x664C6143)\n   - Parses FLAC metadata blocks (STREAMINFO and others) using a bitstream parser\n   - Extracts codec parameters: sample rate, channel count, bits per sample, block size, total sample count\n   - Configures the output PID with codec properties via `flac_dmx_check_pid()`\n   - Advances the buffer past the initialization data\n   - Sets the initialized flag\n\n7. **Frame Synchronization and Validation** (lines 457-487, 537-542): Searches for valid FLAC frame headers by:\n   - Looking for the 0xFF 0xF8 sync pattern\n   - Validating the frame header using `flac_parse_header()` which includes CRC8 verification\n   - If an invalid frame is detected, logs a warning, drops bytes, and resyncs\n\nThis code segment is critical for converting a raw FLAC bitstream into properly framed packets with accurate timing information, enabling downstream filters to decode and process the audio data correctly."
  },
  {
    "instance_id": "Choser_CVE-2023-0770",
    "hits": [
      {
        "docid": "src/scenegraph/vrml_proto.c",
        "startline": 1275,
        "endline": 1300
      },
      {
        "docid": "include/gpac/internal/scenegraph_dev.h",
        "startline": 306,
        "endline": 327
      },
      {
        "docid": "include/gpac/internal/scenegraph_dev.h",
        "startline": 455,
        "endline": 482
      },
      {
        "docid": "include/gpac/internal/scenegraph_dev.h",
        "startline": 409,
        "endline": 453
      },
      {
        "docid": "include/gpac/scenegraph_vrml.h",
        "startline": 81,
        "endline": 88
      },
      {
        "docid": "include/gpac/scenegraph_vrml.h",
        "startline": 321,
        "endline": 387
      },
      {
        "docid": "include/gpac/scenegraph.h",
        "startline": 424,
        "endline": 453
      },
      {
        "docid": "include/gpac/scenegraph.h",
        "startline": 64,
        "endline": 101
      },
      {
        "docid": "src/scenegraph/vrml_proto.c",
        "startline": 1,
        "endline": 32
      }
    ],
    "function_summary": "This code segment checks if a field in a VRML/MPEG-4 proto interface routes to a time-offset field in the proto implementation. It recursively handles nested protos by checking if the destination node is another proto instance, and if so, calls itself recursively. Otherwise, it performs a case-insensitive string comparison to determine if the destination field is named \"startTime\" or \"stopTime\", returning 1 (true) if it is, and 0 (false) otherwise."
  },
  {
    "instance_id": "Choser_CVE-2023-4754",
    "hits": [
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1423,
        "endline": 1467
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1407,
        "endline": 1422
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1468,
        "endline": 1522
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 866,
        "endline": 905
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 129,
        "endline": 132
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 124,
        "endline": 127
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 188,
        "endline": 191
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 183,
        "endline": 186
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 139,
        "endline": 142
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 157,
        "endline": 160
      },
      {
        "docid": "src/scene_manager/swf_parse.c",
        "startline": 1027,
        "endline": 1036
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 263,
        "endline": 285
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 65,
        "endline": 195
      },
      {
        "docid": "include/gpac/internal/swf_dev.h",
        "startline": 223,
        "endline": 227
      }
    ],
    "function_summary": "This code segment (lines 1423-1467) handles font definition parsing for SWF DefineFont tags (revision 0 and 1). When revision=0, it reads a basic font definition with glyph offsets and shapes. When revision=1 (DefineFont2), it reads extended font metadata including font flags (has_layout, has_shiftJIS, is_unicode, is_ansi, wide_offset, wide_codes, is_italic, is_bold), font name, glyph count, and builds an offset table for either 16-bit or 32-bit offsets based on the wide_offset flag. The code allocates memory for the offset table and populates it by reading either 16-bit or 32-bit values depending on the wide_offset flag."
  },
  {
    "instance_id": "krrrlww_CVE-2019-15903",
    "hits": [
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 4052,
        "endline": 5257
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 516,
        "endline": 617
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 173,
        "endline": 373
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 218,
        "endline": 314
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 265,
        "endline": 278
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 297,
        "endline": 373
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 336,
        "endline": 363
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 396,
        "endline": 449
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 462,
        "endline": 511
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 594,
        "endline": 624
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 697,
        "endline": 821
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 823,
        "endline": 884
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 886,
        "endline": 996
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1041,
        "endline": 1290
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1292,
        "endline": 1337
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1339,
        "endline": 1389
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1391,
        "endline": 1412
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 1414,
        "endline": 1433
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 2555,
        "endline": 3001
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3007,
        "endline": 3023
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3035,
        "endline": 3416
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3421,
        "endline": 3528
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3556,
        "endline": 3664
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3764,
        "endline": 3792
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3794,
        "endline": 3875
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 3877,
        "endline": 3909
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5268,
        "endline": 5280
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5282,
        "endline": 5453
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5455,
        "endline": 5619
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5621,
        "endline": 5640
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5642,
        "endline": 5667
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5669,
        "endline": 5687
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5689,
        "endline": 5733
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5735,
        "endline": 5777
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5779,
        "endline": 5806
      },
      {
        "docid": "expat/lib/xmlparse.c",
        "startline": 5808,
        "endline": 5856
      },
      {
        "docid": "expat/lib/xmlrole.h",
        "startline": 48,
        "endline": 113
      },
      {
        "docid": "expat/lib/xmlrole.h",
        "startline": 115,
        "endline": 126
      },
      {
        "docid": "expat/lib/xmlrole.h",
        "startline": 132,
        "endline": 133
      },
      {
        "docid": "expat/lib/xmltok.h",
        "startline": 40,
        "endline": 118
      },
      {
        "docid": "expat/lib/xmltok.h",
        "startline": 126,
        "endline": 131
      },
      {
        "docid": "expat/lib/xmltok.h",
        "startline": 133,
        "endline": 136
      },
      {
        "docid": "expat/lib/xmltok.h",
        "startline": 142,
        "endline": 196
      },
      {
        "docid": "expat/lib/xmltok.h",
        "startline": 219,
        "endline": 276
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 72,
        "endline": 119
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 121,
        "endline": 164
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 207,
        "endline": 211
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 262,
        "endline": 277
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 333,
        "endline": 338
      },
      {
        "docid": "expat/lib/expat.h",
        "startline": 360,
        "endline": 365
      },
      {
        "docid": "expat/lib/internal.h",
        "startline": 52,
        "endline": 102
      },
      {
        "docid": "expat/lib/internal.h",
        "startline": 104,
        "endline": 106
      }
    ],
    "function_summary": "The code segment in lines 4048-5254 of `expat/lib/xmlparse.c` contains a set of XML parser processor functions that handle different parsing states within the Expat XML parser library. These functions form a state machine for processing XML documents, specifically:\n\n1. **entityValueProcessor (4052-4083, XML_DTD only)**: Processes entity values within DTD parameter entities. It tokenizes the entity value content and calls `doProlog` to handle the tokens.\n\n2. **prologProcessor (4087-4094)**: Entry point for XML prolog parsing. Tokenizes the input and delegates to `doProlog` for role-based processing.\n\n3. **doProlog (4096-5076)**: The core prolog/DTD processing function containing a large switch statement (150+ role cases) that handles XML declarations, DOCTYPE declarations, entity declarations, element type declarations, attribute list declarations, notation declarations, and parameter entity references. It processes tokens returned by `XmlPrologTok` and interprets their semantic roles using `XmlTokenRole`, invoking appropriate user handlers and building internal parser state (DTD, entities, elements, attributes).\n\n4. **epilogProcessor (5078-5140)**: Processes content after the document's root element, allowing only whitespace, processing instructions, and comments.\n\n5. **processInternalEntity (5142-5196)**: Handles expansion of internal entities (both parameter and general entities). It creates an OPEN_INTERNAL_ENTITY structure, manages entity recursion, and delegates to either `doProlog` or `doContent` depending on entity type.\n\n6. **internalEntityProcessor (5198-5257)**: Continues processing of suspended internal entities that couldn't be fully processed in one pass. Resumes from where processing was suspended and switches back to the appropriate processor when done.\n\nThese processor functions use the `enum XML_Error` return type and communicate through parser state fields (m_processor function pointer, m_eventPtr, m_parsingStatus, etc.). They handle character encoding via ENCODING structures, manage memory through STRING_POOL structures, maintain DTD information in hash tables, and support conditional XML_DTD compilation for parameter entity handling."
  },
  {
    "instance_id": "jzquan_CVE-2017-9048",
    "hits": [
      {
        "docid": "valid.c",
        "startline": 1240,
        "endline": 1337
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 274,
        "endline": 314
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 286,
        "endline": 295
      },
      {
        "docid": "include/libxml/xmlstring.h",
        "startline": 85,
        "endline": 85
      },
      {
        "docid": "valid.c",
        "startline": 1324,
        "endline": 1336
      }
    ],
    "function_summary": "This code segment (lines 1265-1323) implements three cases of a switch statement within the xmlSnprintfElementContent function. It formats XML DTD element content definitions into human-readable string representations. The three cases handle: (1) XML_ELEMENT_CONTENT_ELEMENT - outputs element names with optional namespace prefixes; (2) XML_ELEMENT_CONTENT_SEQ - recursively processes sequence content, joining child elements with \" , \" separator; (3) XML_ELEMENT_CONTENT_OR - recursively processes choice content, joining alternatives with \" | \" separator. Each case includes buffer overflow protection by checking the buffer size before string concatenation operations."
  },
  {
    "instance_id": "zju-cve-2021-3921",
    "hits": [
      {
        "docid": "app/Http/Controllers/DebugController.php",
        "startline": 68,
        "endline": 79
      },
      {
        "docid": "app/Http/Controllers/DebugController.php",
        "startline": 88,
        "endline": 111
      },
      {
        "docid": "app/Http/Controllers/DebugController.php",
        "startline": 121,
        "endline": 228
      },
      {
        "docid": "app/Http/Controllers/Auth/LoginController.php",
        "startline": 143,
        "endline": 171
      },
      {
        "docid": "app/Http/Kernel.php",
        "startline": 134,
        "endline": 142
      },
      {
        "docid": "routes/web.php",
        "startline": 80,
        "endline": 89
      }
    ],
    "function_summary": "This code segment defines a route group for authenticated users with simple authentication requirements. It registers four debug and authentication-related routes:\n1. GET /error - displays error messages for debugging purposes\n2. ANY /logout - logs the user out of the application\n3. GET /flush - clears application cache, config, routes, twig, and view caches\n4. GET /debug - displays comprehensive system debug information\n\nAll routes in this group are protected by the 'user-simple-auth' middleware, which requires users to be logged in but does not enforce 2FA or account confirmation. The routes are handled by DebugController and Auth\\LoginController within the FireflyIII\\Http\\Controllers namespace."
  },
  {
    "instance_id": "zju-cve-2025-52886",
    "hits": [
      {
        "docid": "poppler/Annot.cc",
        "startline": 1675,
        "endline": 1685
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 808,
        "endline": 808
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 724,
        "endline": 725
      },
      {
        "docid": "poppler/Annot.h",
        "startline": 791,
        "endline": 791
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 1687,
        "endline": 1687
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 1260,
        "endline": 1299
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7497,
        "endline": 7503
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7505,
        "endline": 7516
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7617,
        "endline": 7622
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7480,
        "endline": 7495
      },
      {
        "docid": "poppler/Annot.cc",
        "startline": 7563,
        "endline": 7575
      }
    ],
    "function_summary": "This code implements reference counting for the Annot class using manual increment and decrement functions. The `incRefCnt()` function increments the atomic reference counter `refCnt` by 1. The `decRefCnt()` function decrements the atomic reference counter by 1, and if the counter reaches 0, it deletes the annotation object (`delete this`). This is a manual reference counting mechanism used to manage the lifetime of Annot objects in a thread-safe manner."
  },
  {
    "instance_id": "zju-cve-2017-12944",
    "hits": [
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 768,
        "endline": 835
      },
      {
        "docid": "libtiff/tif_dirread.c",
        "startline": 56,
        "endline": 65
      },
      {
        "docid": "libtiff/tif_dir.h",
        "startline": 50,
        "endline": 59
      },
      {
        "docid": "libtiff/tiffiop.h",
        "startline": 103,
        "endline": 210
      },
      {
        "docid": "libtiff/tif_dirinfo.c",
        "startline": 440,
        "endline": 468
      },
      {
        "docid": "libtiff/tif_aux.c",
        "startline": 86,
        "endline": 89
      },
      {
        "docid": "libtiff/tiffio.h",
        "startline": 67,
        "endline": 67
      },
      {
        "docid": "libtiff/tiffio.h",
        "startline": 295,
        "endline": 295
      },
      {
        "docid": "libtiff/tiffio.h",
        "startline": 299,
        "endline": 299
      },
      {
        "docid": "libtiff/tiffio.h",
        "startline": 301,
        "endline": 301
      },
      {
        "docid": "libtiff/tif_dir.h",
        "startline": 64,
        "endline": 119
      }
    ],
    "function_summary": "This code segment performs sanity checks to prevent integer overflow when allocating memory for TIFF tag arrays. It validates that the tag array size does not exceed 2GB (2147483647 bytes, which is 2^31-1) in both the source data type (typesize) and destination data type (desttypesize). This prevents overflow of tmsize_t on 32-bit systems where tmsize_t is a signed 32-bit integer. If either check fails, it returns TIFFReadDirEntryErrSizesan error. If both checks pass, it assigns the tag count to the output parameter. These checks protect against malicious or corrupted TIFF files that could cause memory allocation failures or buffer overflows."
  },
  {
    "instance_id": "zju-cve-2025-54418",
    "hits": [
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 73,
        "endline": 91
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 34,
        "endline": 34
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 199,
        "endline": 221
      },
      {
        "docid": "system/Images/Handlers/ImageMagickHandler.php",
        "startline": 281,
        "endline": 295
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 53,
        "endline": 60
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 125,
        "endline": 125
      },
      {
        "docid": "system/Images/Handlers/BaseHandler.php",
        "startline": 185,
        "endline": 210
      },
      {
        "docid": "system/Images/Image.php",
        "startline": 64,
        "endline": 93
      },
      {
        "docid": "app/Config/Images.php",
        "startline": 1,
        "endline": 31
      }
    ],
    "function_summary": "This code segment constructs an ImageMagick command-line string for resizing an image. It builds a conditional `-resize` action based on whether aspect ratio should be maintained. If `$maintainRatio` is true, it creates a resize command with `WIDTHxHEIGHT` dimensions (which preserves aspect ratio). If false, it appends an exclamation mark (`!`) after the dimensions (on non-Windows systems, escaped as `\\!`) to force exact dimensions, ignoring aspect ratio. The command includes the source and destination file paths enclosed in quotes. Finally, it calls `$this->process($action)` to execute the ImageMagick command."
  },
  {
    "instance_id": "zju-cve-2025-2945",
    "hits": [
      {
        "docid": "web/pgadmin/tools/sqleditor/__init__.py",
        "startline": 2130,
        "endline": 2214
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/__init__.py",
        "startline": 745,
        "endline": 799
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/__init__.py",
        "startline": 2140,
        "endline": 2140
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/__init__.py",
        "startline": 27,
        "endline": 27
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/__init__.py",
        "startline": 1,
        "endline": 73
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/command.py",
        "startline": 837,
        "endline": 991
      },
      {
        "docid": "web/pgadmin/tools/sqleditor/command.py",
        "startline": 478,
        "endline": 524
      },
      {
        "docid": "web/pgadmin/utils/driver/psycopg3/connection.py",
        "startline": 806,
        "endline": 920
      }
    ],
    "function_summary": "This code segment (lines 2157-2162) processes a 'query_commited' parameter from request data in a query download endpoint. It iterates through request data items to extract two values: 1) the 'query' parameter (stored in sql variable), and 2) the 'query_commited' parameter. For 'query_commited', if the value is a string, it evaluates it using eval() to convert it to a boolean; otherwise, it uses the value directly. This is a security vulnerability as using eval() on user-controlled input can lead to arbitrary code execution."
  },
  {
    "instance_id": "zju-CVE-2021-27973",
    "hits": [
      {
        "docid": "admin/languages_installed.php",
        "startline": 24,
        "endline": 30
      },
      {
        "docid": "admin/include/languages.class.php",
        "startline": 29,
        "endline": 112
      },
      {
        "docid": "include/functions.inc.php",
        "startline": 998,
        "endline": 1014
      },
      {
        "docid": "include/functions_url.inc.php",
        "startline": 15,
        "endline": 27
      },
      {
        "docid": "include/functions_user.inc.php",
        "startline": 791,
        "endline": 794
      },
      {
        "docid": "admin.php",
        "startline": 138,
        "endline": 147
      },
      {
        "docid": "admin/languages_installed.php",
        "startline": 14,
        "endline": 21
      }
    ],
    "function_summary": "This code segment handles language management actions from HTTP GET requests. It checks if both 'action' and 'language' parameters are present in the URL query string. If they are, it calls the `perform_action` method of the `$languages` object (an instance of the `languages` class) with those parameters. The method returns an array of errors, which is stored in `$page['errors']`. If no errors occurred (empty error array), the page is redirected to `$base_url` using the `redirect` function. This implements a GET-based action handler for language installation/activation/deactivation operations with error handling and Post-Redirect-Get pattern."
  },
  {
    "instance_id": "zju-cve-2021-26120",
    "hits": [
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 386,
        "endline": 392
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 19,
        "endline": 27
      },
      {
        "docid": "tests/UnitTests/SecurityTests/SecurityTest.php",
        "startline": 16,
        "endline": 16
      },
      {
        "docid": "tests/PHPUnit_Smarty.php",
        "startline": 10,
        "endline": 24
      },
      {
        "docid": "tests/PHPUnit_Smarty.php",
        "startline": 128,
        "endline": 181
      },
      {
        "docid": "tests/PHPUnit_Smarty.php",
        "startline": 663,
        "endline": 665
      },
      {
        "docid": "libs/Smarty.class.php",
        "startline": 109,
        "endline": 109
      },
      {
        "docid": "libs/Smarty.class.php",
        "startline": 363,
        "endline": 370
      },
      {
        "docid": "libs/Smarty.class.php",
        "startline": 735,
        "endline": 739
      },
      {
        "docid": "libs/Smarty.class.php",
        "startline": 1000,
        "endline": 1050
      },
      {
        "docid": "libs/sysplugins/smarty_internal_templatebase.php",
        "startline": 131,
        "endline": 135
      },
      {
        "docid": "libs/sysplugins/smarty_internal_compile_private_special_variable.php",
        "startline": 29,
        "endline": 129
      },
      {
        "docid": "libs/sysplugins/smarty_internal_compile_private_special_variable.php",
        "startline": 83,
        "endline": 88
      },
      {
        "docid": "libs/sysplugins/smarty_security.php",
        "startline": 22,
        "endline": 22
      },
      {
        "docid": "libs/sysplugins/smarty_security.php",
        "startline": 404,
        "endline": 416
      },
      {
        "docid": "libs/sysplugins/smarty_security.php",
        "startline": 160,
        "endline": 160
      },
      {
        "docid": "libs/sysplugins/smartycompilerexception.php",
        "startline": 8,
        "endline": 45
      }
    ],
    "function_summary": "This code is a unit test that verifies security policy enforcement in Smarty templates. Specifically, it tests that when security mode is enabled, accessing the special Smarty variable `$smarty.template_object` from within a template is blocked and throws a SmartyCompilerException. The test sets up an expectation for this exception and then attempts to display a template that accesses the forbidden variable."
  },
  {
    "instance_id": "sjtu_CVE-2024-2928",
    "hits": [
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 421,
        "endline": 480
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 274,
        "endline": 283
      },
      {
        "docid": "mlflow/utils/uri.py",
        "startline": 478,
        "endline": 484
      },
      {
        "docid": "mlflow/utils/proto_json_utils.py",
        "startline": 106,
        "endline": 123
      },
      {
        "docid": "mlflow/protos/service_pb2.py",
        "startline": 191,
        "endline": 204
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 18,
        "endline": 18
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 10,
        "endline": 10
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 14,
        "endline": 14
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 104,
        "endline": 104
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 66,
        "endline": 66
      },
      {
        "docid": "mlflow/protos/databricks_pb2.py",
        "startline": 1,
        "endline": 50
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 110,
        "endline": 111
      },
      {
        "docid": "mlflow/server/handlers.py",
        "startline": 160,
        "endline": 161
      }
    ],
    "function_summary": "This code segment handles the creation of a new experiment in MLflow's tracking server. It performs the following tasks:\n1. Parses and validates the incoming CreateExperiment request, extracting the experiment name (required), artifact_location (optional), and tags (optional array)\n2. Converts the request tags from protobuf format to ExperimentTag entity objects\n3. Validates the artifact_location URL's query string to prevent security attacks (path traversal, etc.)\n4. Calls the tracking store to create the experiment with the provided parameters\n5. Creates a CreateExperiment.Response message with the generated experiment_id\n6. Serializes the response to JSON and returns it as a Flask Response object"
  },
  {
    "instance_id": "Choser_CVE-2017-7303",
    "hits": [
      {
        "docid": "binutils/objcopy.c",
        "startline": 3522,
        "endline": 3564
      },
      {
        "docid": "bfd/bfd-in2.h",
        "startline": 2470,
        "endline": 2490
      },
      {
        "docid": "bfd/bfd-in2.h",
        "startline": 6473,
        "endline": 6473
      },
      {
        "docid": "bfd/bfd-in2.h",
        "startline": 1689,
        "endline": 1705
      },
      {
        "docid": "bfd/bfd-in2.h",
        "startline": 6114,
        "endline": 6190
      },
      {
        "docid": "binutils/objcopy.c",
        "startline": 86,
        "endline": 87
      },
      {
        "docid": "binutils/objcopy.c",
        "startline": 3533,
        "endline": 3548
      }
    ],
    "function_summary": "The code segment in binutils/objcopy.c lines 3552-3564 iterates through an array of relocation entries (`relpp`) and marks their associated symbols with the `BSF_KEEP` flag to prevent them from being stripped. For each relocation entry, it checks that the symbol pointer is not NULL and that the symbol does not belong to one of three special BFD sections (common, absolute, or undefined). If these conditions are met, it sets the `BSF_KEEP` flag on the symbol by performing a bitwise OR operation on the symbol's flags field. This ensures that symbols actually used in relocations are preserved during the object file copy operation."
  },
  {
    "instance_id": "zju-cve-2024-27306",
    "hits": [
      {
        "docid": "aiohttp/web_urldispatcher.py",
        "startline": 682,
        "endline": 716
      },
      {
        "docid": "aiohttp/web_urldispatcher.py",
        "startline": 517,
        "endline": 681
      },
      {
        "docid": "aiohttp/web_urldispatcher.py",
        "startline": 36,
        "endline": 36
      },
      {
        "docid": "aiohttp/web_response.py",
        "startline": 670,
        "endline": 671
      }
    ],
    "function_summary": "This code segment implements the `_directory_as_html` method of the `StaticResource` class, which generates an HTML directory listing page. It takes a directory path as input, iterates through all files and subdirectories within it, and constructs an HTML page with clickable links to each item. Directory entries are marked with a trailing slash. The method performs path calculations relative to the static resource's base directory and assembles a complete HTML document with a title showing \"Index of /path/to/dir\"."
  },
  {
    "instance_id": "zju-cve-2020-16846",
    "hits": [
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 10,
        "endline": 13
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 25,
        "endline": 27
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 31,
        "endline": 31
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 49,
        "endline": 49
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 63,
        "endline": 63
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 286,
        "endline": 288
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 300,
        "endline": 302
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 304,
        "endline": 304
      },
      {
        "docid": "salt/client/ssh/shell.py",
        "startline": 454,
        "endline": 454
      }
    ],
    "function_summary": "Lines 10-13 are standard library import statements with an inline comment. Line 10 contains a comment \"# Import python libs\" that groups the subsequent imports. Lines 11-13 import three Python standard library modules: `re` (regular expressions), `subprocess` (process management), and `sys` (system-specific parameters and functions). These modules are used throughout the file for pattern matching (re.compile at lines 25-27, 31), subprocess execution (subprocess.call at line 49, subprocess.Popen at lines 286-287, subprocess.PIPE at lines 287, 301), and system operations (sys.exit at line 63)."
  },
  {
    "instance_id": "zju-cve-2019-3968",
    "hits": [
      {
        "docid": "contrib/forms/scanned_notes/new.php",
        "startline": 35,
        "endline": 36
      },
      {
        "docid": "interface/globals.php",
        "startline": 163,
        "endline": 163
      },
      {
        "docid": "interface/globals.php",
        "startline": 602,
        "endline": 602
      },
      {
        "docid": "interface/globals.php",
        "startline": 610,
        "endline": 610
      },
      {
        "docid": "interface/globals.php",
        "startline": 89,
        "endline": 89
      },
      {
        "docid": "contrib/forms/scanned_notes/new.php",
        "startline": 24,
        "endline": 27
      },
      {
        "docid": "contrib/forms/scanned_notes/new.php",
        "startline": 31,
        "endline": 32
      },
      {
        "docid": "contrib/forms/scanned_notes/new.php",
        "startline": 40,
        "endline": 96
      },
      {
        "docid": "library/forms.inc",
        "startline": 41,
        "endline": 81
      },
      {
        "docid": "library/sql.inc",
        "startline": 234,
        "endline": 252
      },
      {
        "docid": "library/sql.inc",
        "startline": 99,
        "endline": 114
      },
      {
        "docid": "library/sql.inc",
        "startline": 265,
        "endline": 288
      }
    ],
    "function_summary": "This code segment performs input retrieval and path construction for a scanned notes form. Line 35 retrieves the form ID from the GET parameter 'id' without validation or sanitization. Line 36 constructs a file system path to the patient's encounter documents directory by concatenating the global site directory, the patient ID ($pid), and a static subdirectory path. These values are used later in the script for database operations and file management related to scanned medical notes."
  },
  {
    "instance_id": "zju-cve-2022-2732",
    "hits": [
      {
        "docid": "interface/patient_file/summary/add_edit_amendments.php",
        "startline": 1,
        "endline": 30
      },
      {
        "docid": "src/Common/Acl/AclMain.php",
        "startline": 1,
        "endline": 233
      },
      {
        "docid": "interface/globals.php",
        "startline": 292,
        "endline": 298
      },
      {
        "docid": "library/translation.inc.php",
        "startline": 12,
        "endline": 61
      }
    ],
    "function_summary": "This code segment implements access control for the amendments feature by checking if the current user has permission to access the 'patients/amendment' section. If the user lacks permission, it renders an unauthorized error page using Twig template engine and terminates script execution. It also determines and stores boolean flags for edit and add access permissions to control subsequent operations within the amendments management interface."
  },
  {
    "instance_id": "zju-CVE-2022-0611",
    "hits": [
      {
        "docid": "app/Http/Controllers/Api/AssetMaintenancesController.php",
        "startline": 34,
        "endline": 90
      },
      {
        "docid": "app/Models/AssetMaintenance.php",
        "startline": 1,
        "endline": 212
      }
    ],
    "function_summary": "Lines 34-40 define the `index()` method that initializes an AssetMaintenance query with eager-loaded relationships (asset, asset.model, asset.location, supplier, asset.company, admin) and optionally filters the results by applying a text search if the 'search' request parameter is present."
  },
  {
    "instance_id": "zju-cve-2020-19217",
    "hits": [
      {
        "docid": "admin/batch_manager.php",
        "startline": 128,
        "endline": 134
      },
      {
        "docid": "admin/batch_manager.php",
        "startline": 89,
        "endline": 198
      },
      {
        "docid": "admin/batch_manager.php",
        "startline": 463,
        "endline": 495
      },
      {
        "docid": "admin/batch_manager.php",
        "startline": 30,
        "endline": 45
      },
      {
        "docid": "include/common.inc.php",
        "startline": 63,
        "endline": 70
      },
      {
        "docid": "include/constants.php",
        "startline": 48,
        "endline": 101
      }
    ],
    "function_summary": "This code segment saves the category filter settings to the user's session when a filter form is submitted. It stores the category ID and an optional \"recursive\" flag that indicates whether to include subcategories in the filter."
  },
  {
    "instance_id": "zju-cve-2022-4223",
    "hits": [
      {
        "docid": "web/pgadmin/misc/__init__.py",
        "startline": 195,
        "endline": 240
      },
      {
        "docid": "web/pgadmin/utils/__init__.py",
        "startline": 340,
        "endline": 358
      },
      {
        "docid": "web/pgadmin/utils/constants.py",
        "startline": 114,
        "endline": 114
      },
      {
        "docid": "web/pgadmin/utils/ajax.py",
        "startline": 129,
        "endline": 135
      },
      {
        "docid": "web/pgadmin/utils/ajax.py",
        "startline": 60,
        "endline": 79
      },
      {
        "docid": "web/pgadmin/misc/__init__.py",
        "startline": 13,
        "endline": 13
      },
      {
        "docid": "web/pgadmin/misc/__init__.py",
        "startline": 19,
        "endline": 19
      },
      {
        "docid": "web/pgadmin/misc/__init__.py",
        "startline": 20,
        "endline": 20
      },
      {
        "docid": "web/pgadmin/misc/__init__.py",
        "startline": 22,
        "endline": 24
      }
    ],
    "function_summary": "This function validates a binary path by attempting to execute PostgreSQL utilities (pg_dump, pg_dumpall, pg_restore, psql) with the --version flag from the specified directory. It parses JSON request data to extract the utility_path, replaces any \"$DIR\" placeholder with the actual application directory, constructs full paths to each utility (adding .exe extension on Windows), executes each utility's --version command, and returns an HTML-formatted string showing which utilities were found with their version information or which were not found. If no valid path is provided, it returns a 428 Precondition Required error."
  },
  {
    "instance_id": "sjtu_CVE-2018-1002201",
    "hits": [
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 1238,
        "endline": 1288
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 64,
        "endline": 64
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipEntryCallback.java",
        "startline": 1,
        "endline": 40
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/NameMapper.java",
        "startline": 1,
        "endline": 34
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/commons/FileUtils.java",
        "startline": 1,
        "endline": 80
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/commons/FilenameUtils.java",
        "startline": 175,
        "endline": 230
      },
      {
        "docid": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
        "startline": 70,
        "endline": 70
      }
    ],
    "function_summary": "This code segment (lines 1196-1273 of ZipUtil.java) is the `process` method of the private inner class `Unwraper` (which implements `ZipEntryCallback`). This method extracts a ZIP entry while removing a single parent directory from the entry path. It ensures that all entries share the same root directory, throwing an exception if multiple root directories are detected. For each entry, it removes the root directory prefix and extracts the file/directory to the output location, creating necessary parent directories as needed."
  },
  {
    "instance_id": "YilZhong_CVE-2017-5969",
    "hits": [
      {
        "docid": "valid.c",
        "startline": 1250,
        "endline": 1339
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 304,
        "endline": 314
      },
      {
        "docid": "include/libxml/tree.h",
        "startline": 278,
        "endline": 283
      },
      {
        "docid": "include/libxml/xmlstring.h",
        "startline": 85,
        "endline": 85
      }
    ],
    "function_summary": "Lines 1265-1274 of valid.c handle the XML_ELEMENT_CONTENT_ELEMENT case in a switch statement within the xmlSnprintfElementContent function. This code calculates the total length needed to represent a qualified XML element name (prefix:localname) and checks whether there is sufficient buffer space remaining before attempting to append the name. Specifically:\n\n1. It calculates qnameLen as the length of the element's base name using xmlStrlen(content->name)\n2. If a namespace prefix exists (content->prefix != NULL), it adds the prefix length plus 1 (for the colon separator) to qnameLen\n3. It checks if remaining buffer space (size - len) is less than the required space (qnameLen + 10 bytes for safety margin)\n4. If insufficient space exists, it appends \" ...\" to the buffer and returns early to prevent buffer overflow\n5. If there is sufficient space, execution continues to line 1274 where it begins appending the prefix (if present) to the output buffer\n\nThis is a buffer overflow protection mechanism used in debug/formatting routines for DTD element content models."
  },
  {
    "instance_id": "zju-cve-2020-29607",
    "hits": [
      {
        "docid": "files/.htaccess",
        "startline": 1,
        "endline": 9
      }
    ],
    "function_summary": "This code segment closes the FilesMatch directive for .phtml files and disables CGI script execution for the directory. Line 7 closes the FilesMatch block that prevents .phtml files from being executed as server-side scripts. Line 9 disables the execution of CGI scripts in the /files directory using the Apache Options directive."
  },
  {
    "instance_id": "tsinghua_cpython_cve_2015_20107",
    "hits": [
      {
        "docid": "Lib/mailcap.py",
        "startline": 159,
        "endline": 177
      },
      {
        "docid": "Lib/mailcap.py",
        "startline": 179,
        "endline": 190
      },
      {
        "docid": "Lib/mailcap.py",
        "startline": 192,
        "endline": 222
      },
      {
        "docid": "Lib/mailcap.py",
        "startline": 9,
        "endline": 14
      },
      {
        "docid": "Lib/mailcap.py",
        "startline": 3,
        "endline": 3
      }
    ],
    "function_summary": "This code segment iterates through mailcap entries retrieved by the `lookup()` function to find a matching entry for a given MIME type. For each entry, it checks if a 'test' command exists and executes it using `os.system()` to validate the entry. If the test fails (non-zero exit code), it skips to the next entry. If the test passes or no test exists, it substitutes placeholders in the command string using the `subst()` function and returns the command along with the matching entry. If no match is found, it returns (None, None). The code is part of the `findmatch()` function which begins at line 159, and lines 179-183 show the start of the `lookup()` function that is called within this segment."
  },
  {
    "instance_id": "tsinghua_mosquitto_cve_2017_7650",
    "hits": [
      {
        "docid": "src/security_default.c",
        "startline": 254,
        "endline": 293
      },
      {
        "docid": "src/security_default.c",
        "startline": 224,
        "endline": 316
      },
      {
        "docid": "lib/util_mosq.c",
        "startline": 220,
        "endline": 318
      },
      {
        "docid": "src/mosquitto_broker.h",
        "startline": 215,
        "endline": 221
      },
      {
        "docid": "src/mosquitto_broker.h",
        "startline": 242,
        "endline": 270
      },
      {
        "docid": "lib/mosquitto_internal.h",
        "startline": 153,
        "endline": 274
      },
      {
        "docid": "src/mosquitto_plugin.h",
        "startline": 22,
        "endline": 24
      },
      {
        "docid": "lib/memory_mosq.h",
        "startline": 27,
        "endline": 35
      }
    ],
    "function_summary": "This code segment performs pattern-based ACL (Access Control List) matching by expanding topic patterns containing placeholder substitutions (%c for client ID, %u for username). It calculates the expanded length of the ACL topic pattern, allocates memory for the expanded string, replaces %c and %u placeholders with actual client ID and username values, then checks if the resulting expanded topic matches the requested topic using mosquitto_topic_matches_sub(). If a match is found and the access permissions allow the requested operation, access is granted; otherwise, it continues checking the next pattern ACL."
  },
  {
    "instance_id": "tsinghua_phpipam_phpipam_cve_2022_1224",
    "hits": [
      {
        "docid": "app/tools/logs/show-logs.php",
        "startline": 18,
        "endline": 40
      },
      {
        "docid": "functions/classes/class.User.php",
        "startline": 1,
        "endline": 1778
      },
      {
        "docid": "functions/classes/class.User.php",
        "startline": 125,
        "endline": 154
      },
      {
        "docid": "functions/classes/class.User.php",
        "startline": 360,
        "endline": 407
      },
      {
        "docid": "functions/classes/class.Tools.php",
        "startline": 1,
        "endline": 63
      },
      {
        "docid": "functions/classes/class.Log.php",
        "startline": 1,
        "endline": 299
      }
    ],
    "function_summary": "Lines 28-40 initialize core PHP objects and verify user authentication. If required objects ($User, $Database, $Tools, $Result, $Log) are not already instantiated, the code requires the functions.php bootstrap file, instantiates a PDO database connection, creates User, Tools, Result, and Logging objects with the database dependency, and calls check_user_session() to verify the user is logged in. After initialization, if no POST parameters for log severity levels (Informational, Notice, Warning) are provided, it defaults all three to be displayed by setting their POST values."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1722",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 250,
        "endline": 286
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 64,
        "endline": 195
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 32,
        "endline": 51
      }
    ],
    "function_summary": "This code segment (lines 250-265) implements CORS (Cross-Origin Resource Sharing) domain validation for proxy requests. It examines the HTTP referer header to determine if the request originates from a trusted domain (draw.io or diagrams.net subdomains), and if so, extracts and returns the appropriate CORS domain string that should be included in the Access-Control-Allow-Origin response header. The method returns null for untrusted domains (which prevents CORS responses), a specific domain substring for trusted domains, or an empty string for Confluence/Jira proxy requests identified by either a specific referer or user-agent."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1723",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/EmbedServlet2.java",
        "startline": 390,
        "endline": 410
      },
      {
        "docid": "src/main/java/com/mxgraph/online/EmbedServlet2.java",
        "startline": 385,
        "endline": 388
      },
      {
        "docid": "src/main/java/com/mxgraph/online/EmbedServlet2.java",
        "startline": 420,
        "endline": 431
      },
      {
        "docid": "src/main/java/com/mxgraph/online/EmbedServlet2.java",
        "startline": 250,
        "endline": 252
      },
      {
        "docid": "src/main/java/com/mxgraph/online/EmbedServlet2.java",
        "startline": 224,
        "endline": 248
      },
      {
        "docid": "src/main/java/com/mxgraph/online/Utils.java",
        "startline": 192,
        "endline": 217
      },
      {
        "docid": "src/main/java/com/mxgraph/online/Utils.java",
        "startline": 135,
        "endline": 157
      },
      {
        "docid": "src/main/java/com/mxgraph/online/Utils.java",
        "startline": 42,
        "endline": 42
      },
      {
        "docid": "src/main/java/com/mxgraph/online/Utils.java",
        "startline": 47,
        "endline": 47
      }
    ],
    "function_summary": "This code segment (lines 390-410) implements URL content fetching and caching for the GraphViewer. It iterates through an array of URLs from the \"fetch\" request parameter, downloads the content from each URL, URL-encodes it, and generates JavaScript code that stores the fetched content in the GraphViewer.cachedUrls object. It uses a HashSet to prevent duplicate URL fetches, handles exceptions silently, and builds a JavaScript string (setCachedUrls) that assigns decoded content to the cachedUrls cache using double-encoded URI components with escape sequences for JavaScript safety."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1767",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 247,
        "endline": 282
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 64,
        "endline": 202
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 32,
        "endline": 51
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 208,
        "endline": 234
      }
    ],
    "function_summary": "This code segment (lines 247-269) implements CORS (Cross-Origin Resource Sharing) domain validation logic for a proxy servlet. It examines the HTTP referer header and user agent to determine if the request originates from authorized domains (draw.io, diagrams.net, quipelements.com, or Confluence/Jira servers). If the referer matches specific regex patterns, it extracts and returns the appropriate CORS domain string; otherwise, it returns null to deny the request. The function uses case-insensitive matching and substring extraction to construct the allowed origin for the Access-Control-Allow-Origin header."
  },
  {
    "instance_id": "tsinghua_core_cve_2023_39008",
    "hits": [
      {
        "docid": "src/opnsense/service/modules/template.py",
        "startline": 64,
        "endline": 65
      },
      {
        "docid": "src/opnsense/service/modules/addons/template_helpers.py",
        "startline": 55,
        "endline": 123
      },
      {
        "docid": "src/opnsense/mvc/app/models/OPNsense/Cron/Cron.xml",
        "startline": 1,
        "endline": 72
      }
    ],
    "function_summary": "Lines 12-16 generate a cron job entry for each enabled job by: (1) outputting a comment line with the job's origin and description; (2) outputting the cron schedule fields (minutes, hours, days, months, weekdays); (3) invoking /usr/local/sbin/configctl with the -d flag and the job's command; (4) if parameters exist, splitting them using shell lexer rules (shlex_split), then iterating through each parameter and appending it to the command line with proper shell escaping (shlex_quote)."
  },
  {
    "instance_id": "tsinghua_lunary_ai_lunary_cve_2024_1738",
    "hits": [
      {
        "docid": "packages/backend/src/api/v1/evaluations/index.ts",
        "startline": 120,
        "endline": 139
      },
      {
        "docid": "packages/backend/src/utils/authorization.ts",
        "startline": 19,
        "endline": 42
      },
      {
        "docid": "packages/backend/src/utils/koa.ts",
        "startline": 8,
        "endline": 12
      },
      {
        "docid": "packages/backend/src/utils/db.ts",
        "startline": 1,
        "endline": 44
      },
      {
        "docid": "packages/shared/access-control/roles.ts",
        "startline": 1,
        "endline": 23
      },
      {
        "docid": "packages/shared/access-control/roles.ts",
        "startline": 411,
        "endline": 421
      }
    ],
    "function_summary": "This code defines a GET endpoint `/evaluations/result/:evaluationId` that retrieves all evaluation results for a specific evaluation. It performs an access control check to verify the user has \"read\" permission for the \"evaluations\" resource, then executes a SQL query that joins three tables (evaluation_result, dataset_prompt, and dataset_prompt_variation) to fetch all results associated with the given evaluation ID. The query returns all columns from all three tables, with an aliased prompt_id field, and sends the results as JSON in the response body."
  },
  {
    "instance_id": "tsinghua_lunary_cve_2024_4146",
    "hits": [
      {
        "docid": "packages/backend/src/utils/authorization.ts",
        "startline": 7,
        "endline": 17
      },
      {
        "docid": "packages/backend/src/utils/db.ts",
        "startline": 1,
        "endline": 43
      },
      {
        "docid": "packages/shared/access-control/roles.ts",
        "startline": 1,
        "endline": 421
      },
      {
        "docid": "packages/backend/src/utils/koa.ts",
        "startline": 1,
        "endline": 14
      },
      {
        "docid": "packages/db/0001-init.sql",
        "startline": 25,
        "endline": 36
      },
      {
        "docid": "packages/db/0001-init.sql",
        "startline": 85,
        "endline": 91
      },
      {
        "docid": "packages/db/0001-init.sql",
        "startline": 71,
        "endline": 82
      },
      {
        "docid": "packages/db/0001-init.sql",
        "startline": 232,
        "endline": 241
      }
    ],
    "function_summary": "This code segment defines an async function `checkProjectAccess` that verifies whether a user has access to a specific project by checking if the project belongs to the same organization as the user. It executes a SQL query that checks if a project with the given `projectId` exists within the organization associated with the `userId`, returning a boolean indicating access permission."
  },
  {
    "instance_id": "tsinghua_owncloud_cve_2012_4392",
    "hits": [
      {
        "docid": "index.php",
        "startline": 74,
        "endline": 105
      },
      {
        "docid": "lib/user.php",
        "startline": 196,
        "endline": 210
      },
      {
        "docid": "lib/user.php",
        "startline": 217,
        "endline": 220
      },
      {
        "docid": "lib/user.php",
        "startline": 353,
        "endline": 363
      },
      {
        "docid": "lib/user.php",
        "startline": 369,
        "endline": 374
      },
      {
        "docid": "lib/user.php",
        "startline": 379,
        "endline": 386
      },
      {
        "docid": "lib/preferences.php",
        "startline": 115,
        "endline": 126
      },
      {
        "docid": "lib/preferences.php",
        "startline": 139,
        "endline": 153
      },
      {
        "docid": "lib/util.php",
        "startline": 325,
        "endline": 337
      },
      {
        "docid": "lib/log.php",
        "startline": 16,
        "endline": 39
      },
      {
        "docid": "lib/helper.php",
        "startline": 596,
        "endline": 621
      },
      {
        "docid": "lib/config.php",
        "startline": 70,
        "endline": 78
      },
      {
        "docid": "lib/base.php",
        "startline": 28,
        "endline": 80
      },
      {
        "docid": "lib/app.php",
        "startline": 51,
        "endline": 74
      }
    ],
    "function_summary": "This code segment handles the \"remember me\" functionality and user login authentication for the ownCloud application. It performs two main operations: (1) Automatic login via cookies - checks if \"remember login\" cookies exist (oc_remember_login, oc_token, oc_username), validates the stored token against the user's preferences in the database, and if valid, logs the user in and redirects to the default page; otherwise clears the cookies. (2) Form-based login - validates POST login requests by checking CSRF tokens (sectoken), authenticating username/password via OC_User::login(), and if \"remember_login\" checkbox was selected, generates a new token (MD5 hash of username+time+password), stores it in user preferences, and sets magic cookies for future auto-login; finally redirects to the default page or sets an error flag if authentication fails."
  },
  {
    "instance_id": "tsinghua_phpipam_phpipam_cve_2022_1223",
    "hits": [
      {
        "docid": "app/subnets/addresses/export-subnet.php",
        "startline": 28,
        "endline": 33
      },
      {
        "docid": "functions/classes/class.Tools.php",
        "startline": 719,
        "endline": 748
      },
      {
        "docid": "functions/classes/class.Common.php",
        "startline": 1,
        "endline": 850
      },
      {
        "docid": "functions/classes/class.Addresses.php",
        "startline": 1323,
        "endline": 1354
      }
    ],
    "function_summary": "Lines 28-35 of app/subnets/addresses/export-subnet.php perform data retrieval operations for subnet export functionality. The code: (1) fetches subnet details from the database using the 'subnetId' from $_GET parameter via Tools->fetch_object(); (2) retrieves all IP addresses belonging to that subnet using Addresses->fetch_subnet_addresses() with ascending order by IP address; (3) initializes an empty array if no addresses are found; (4) fetches custom field definitions for IP addresses from the database using Tools->fetch_custom_fields()."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1711",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 250,
        "endline": 286
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 64,
        "endline": 195
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 1,
        "endline": 60
      }
    ],
    "function_summary": "This code segment implements CORS (Cross-Origin Resource Sharing) domain validation logic for proxy requests. The getCorsDomain method examines the HTTP referer and user-agent headers to determine if the request originates from authorized domains (draw.io, diagrams.net, quipelements.com, or Confluence/Jira servers). If the referer matches specific domain patterns using regex, it extracts and returns the appropriate CORS domain string. For Confluence/Jira proxy requests, it checks for either a specific referer value or a hardcoded legacy Firefox user-agent string, returning an empty string to allow cross-origin access. If no patterns match, it returns null, indicating the request should not receive CORS headers."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1784",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 250,
        "endline": 282
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 32,
        "endline": 60
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 64,
        "endline": 202
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 1,
        "endline": 27
      }
    ],
    "function_summary": "This code segment is the `getCorsDomain` method that determines the appropriate Cross-Origin Resource Sharing (CORS) domain header value based on the HTTP referer and user-agent headers. It uses regex pattern matching to validate if the request originates from trusted domains (draw.io, diagrams.net, or quipelements.com) and extracts the appropriate subdomain prefix. For Confluence/Jira proxy requests, it identifies them through specific referer or user-agent strings and returns an empty string to allow CORS. The method returns null if no trusted domain pattern matches, which signals that CORS should not be allowed."
  },
  {
    "instance_id": "tsinghua_lucene_solr_cve_2017_7660",
    "hits": [
      {
        "docid": "solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
        "startline": 62,
        "endline": 68
      },
      {
        "docid": "solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
        "startline": 196,
        "endline": 220
      },
      {
        "docid": "solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
        "startline": 322,
        "endline": 324
      },
      {
        "docid": "solr/core/src/java/org/apache/solr/core/CoreContainer.java",
        "startline": 1410,
        "endline": 1412
      },
      {
        "docid": "solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java",
        "startline": 52,
        "endline": 177
      },
      {
        "docid": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java",
        "startline": 69,
        "endline": 478
      },
      {
        "docid": "solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
        "startline": 926,
        "endline": 942
      },
      {
        "docid": "solr/core/src/java/org/apache/solr/util/CryptoKeys.java",
        "startline": 260,
        "endline": 268
      },
      {
        "docid": "solr/solrj/src/java/org/apache/solr/common/util/Utils.java",
        "startline": 100,
        "endline": 112
      }
    ],
    "function_summary": "This code segment implements the getRemotePublicKey method which fetches a remote node's RSA public key from ZooKeeper for PKI authentication. The method: (1) retrieves the base URL for the given node name from ZooKeeper state, (2) constructs an HTTP GET request to the remote node's /admin/info/key endpoint, (3) executes the request using the update shard handler's HTTP client, (4) parses the JSON response to extract the public key string, (5) deserializes the X.509 encoded public key, (6) caches it in the keyCache map, and (7) returns the PublicKey object. If any exception occurs during the process, it logs an error and returns null."
  },
  {
    "instance_id": "tsinghua_core_cve_2020_10254",
    "hits": [
      {
        "docid": "apps/files_sharing/ajax/publicpreview.php",
        "startline": 35,
        "endline": 73
      },
      {
        "docid": "lib/public/Share/IManager.php",
        "startline": 186,
        "endline": 194
      },
      {
        "docid": "lib/public/Share/IShare.php",
        "startline": 92,
        "endline": 98
      },
      {
        "docid": "lib/public/Share/IShare.php",
        "startline": 125,
        "endline": 132
      },
      {
        "docid": "lib/public/Share/IShare.php",
        "startline": 255,
        "endline": 261
      },
      {
        "docid": "lib/private/legacy/response.php",
        "startline": 31,
        "endline": 105
      },
      {
        "docid": "lib/public/JSON.php",
        "startline": 189,
        "endline": 196
      },
      {
        "docid": "lib/private/legacy/json.php",
        "startline": 122,
        "endline": 132
      },
      {
        "docid": "lib/public/Util.php",
        "startline": 149,
        "endline": 158
      },
      {
        "docid": "lib/private/Server.php",
        "startline": 1314,
        "endline": 1318
      },
      {
        "docid": "lib/public/IServerContainer.php",
        "startline": 311,
        "endline": 316
      },
      {
        "docid": "lib/private/legacy/user.php",
        "startline": 257,
        "endline": 259
      },
      {
        "docid": "lib/base.php",
        "startline": 1,
        "endline": 50
      }
    ],
    "function_summary": "This code segment validates and retrieves a shared item based on a public share token. First, it checks if the token parameter is empty (line 42-46), returning a 400 error if missing. Then it retrieves the share manager from the server container (line 48) and attempts to fetch the share by token (lines 49-55), catching ShareNotFound exceptions and returning a 404 error if the token is invalid. Next, it extracts the share owner's user ID from the share object (line 57-62), returning a 500 error if the owner is null. Finally, it verifies the user exists (line 64) and attempts to retrieve the file node associated with the share (lines 67-73), returning a 404 error if the file cannot be found."
  },
  {
    "instance_id": "tsinghua_ganglia_web_cve_2015_6816",
    "hits": [
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 40,
        "endline": 46
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 78,
        "endline": 81
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 5,
        "endline": 7
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 84,
        "endline": 89
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 34,
        "endline": 39
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 25,
        "endline": 32
      },
      {
        "docid": "lib/GangliaAuth.php",
        "startline": 47,
        "endline": 50
      }
    ],
    "function_summary": "This code segment validates the authentication cookie data structure and verifies the authentication token. It first unserializes the cookie value into a data array (line 40), then checks if the array contains exactly the expected keys 'user', 'group', and 'token' in that exact order (lines 42-44), returning false if the structure is invalid. Finally, it verifies the authentication token by comparing the token from the cookie against a computed token using the username (line 46), and if valid, sets the authentication state and stores the user and group information (lines 47-49)."
  },
  {
    "instance_id": "tsinghua_drawio_cve_2022_1713",
    "hits": [
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 233,
        "endline": 282
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 41,
        "endline": 41
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 65,
        "endline": 196
      },
      {
        "docid": "src/main/java/com/mxgraph/online/ProxyServlet.java",
        "startline": 287,
        "endline": 292
      }
    ],
    "function_summary": "This code segment validates URL parameters to prevent Server-Side Request Forgery (SSRF) attacks by blocking access to private/internal IP address ranges and local hostnames. It parses the input URL string, extracts the protocol and hostname, then checks that: (1) the protocol is HTTP or HTTPS, and (2) the hostname does not match any private IP address ranges (including 10.0.0.0/8, 127.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, and various other reserved ranges), localhost, or internal/local domain names. Returns true if the URL is safe to proxy, false otherwise."
  },
  {
    "instance_id": "tsinghua_autogpt_cve_2025_1040",
    "hits": [
      {
        "docid": "autogpt_platform/backend/backend/blocks/text.py",
        "startline": 1,
        "endline": 1
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/text.py",
        "startline": 4,
        "endline": 4
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/text.py",
        "startline": 10,
        "endline": 10
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/text.py",
        "startline": 121,
        "endline": 161
      },
      {
        "docid": "autogpt_platform/backend/backend/data/block.py",
        "startline": 33,
        "endline": 36
      },
      {
        "docid": "autogpt_platform/backend/backend/data/block.py",
        "startline": 67,
        "endline": 106
      },
      {
        "docid": "autogpt_platform/backend/backend/data/model.py",
        "startline": 116,
        "endline": 149
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/basic.py",
        "startline": 1,
        "endline": 1
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/basic.py",
        "startline": 4,
        "endline": 4
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/basic.py",
        "startline": 10,
        "endline": 10
      },
      {
        "docid": "autogpt_platform/backend/backend/blocks/basic.py",
        "startline": 300,
        "endline": 313
      }
    ],
    "function_summary": "Lines 156-161 implement the `run` method of the `FillTextTemplateBlock` class. This method transforms a format string to support both Python-style string formatting syntax (single braces `{var}`) and Jinja2 template syntax (double braces `{{var}}`), then renders the template using Jinja2 with the provided values dictionary. The regex substitution `re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", input_data.format)` wraps all single-brace variable references with an additional set of braces (converting `{var}` to `{{var}}`), while preserving existing double-brace references to avoid creating triple braces. The rendered output is then yielded with the name \"output\"."
  }
]